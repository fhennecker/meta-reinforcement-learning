%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 488.000000 315.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 488 315
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 488 315
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
dup 34 /t put
dup 35 /a put
dup 36 /hyphen put
dup 37 /one put
dup 38 /r put
dup 39 /L put
dup 40 /S put
dup 41 /T put
dup 42 /M put
dup 43 /parenleft put
dup 44 /four put
dup 45 /eight put
dup 46 /space put
dup 47 /u put
dup 48 /n put
dup 49 /i put
dup 50 /s put
dup 51 /parenright put
dup 52 /h put
dup 53 /V put
dup 54 /l put
dup 55 /e put
dup 56 /pi put
dup 57 /bar put
dup 58 /A put
dup 59 /o put
dup 60 /f put
dup 61 /m put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<

2E2E2EB0401A0100303137112111250901132109030301110A02E4FD580114FEEC230226FEEDFEED01130113F101140A02F3FD0D6601140113FDAF01140167FEEC0114FEC3FEEC022700000000010063FF06014B02EE0017002900B0122FB0062F01B0182FB000D6B40C0A0032042BB20C000A2BB3000C08092BB01032B019D60030313734373E0233321514070611101716151423222E012726633F1B4B32070A0DA19D110A07304A1B42FAA98839602A0A050CA4FECBFECA9E11050A285C388800000000010039FF06012102EE0017002900B0162FB00A2F01B0182FB004D6B4100A0032042BB204100A2BB3000400092BB00832B019D60030311734373611102726353433321E0117161514070E022322390DA19B130A07304A1B423F1B4B32070AF0050CA4013501369D12050A285C3888B0A98839602A0000000001000A00BA011400F50003002700B0002FB401060022042BB401060022042B01B0042FB100012BB403130008042BB005D6003031373521150A010ABA3B3B0000010059000001A3029A0016006000B20F02002BB11006E9B00A32B20304002BB101031020C02FB10006E901B0172FB014D6B10710E9B207140A2BB340070B092BB214070A2BB3401401092BB018D6B107141112B0033900B100101112B00739B00111B01539B00312B006393031133532373216151114163B01152622073533323635110659783E11061D402023FE23203F1E34023B1F400812FDCF1E121F03031F121E02061A000002001C000001D702A5001B001E008A00B21502002BB11606E9B00F32B20405002BB4001C15040D2BB00833B10006E9B00A3201B01F2FB01ED6B01A32B1070AE9B00B32B2071E0A2BB340070A092BB21E070A2BB3401E00092BB00132B3401E16092BB020D6B0361AB101028704B0012EB002C005B11C08F904B01EC002B201021E2E2E2E01B1021C2E2EB0401A01B1071E1112B013390030313735013633321615113315231514163B011526232207353332363D012733111C0133080C0B056464183415295F5E29153418EEF4A51F01D50C0911FE391F571D121F03031F121D571F01750000000003002AFFEA01C9029A00170025003000E000B21502002BB11B09E9B20904002BB12E09E901B0312FB000D6B4180E0028042BB01810B02620D611B1060EE9B0062FB1260EE9B01810B2002B102BB10C0EE9B01E20D611B4120E0028042BB032D6B0361AB1022187B0022EB021C0B12812F9B00EC0B00210B3220221132BB3230221132BB3240221132BB02810B329280E132BB229280E208A208A23060E111239B2240221111239B02339B0223900B7020E2324282921222E2E2E2E2E2E2E2E01B7020E2324282921222E2E2E2E2E2E2E2EB0401A01B12B261112B209151B39393900B12E1B1112B300060C1224173930313734




1F03031F0D20E9333C5749B8200D1F030002001CFFF501D701C0000A001C004600B20902002BB10F09E9B20303002BB11808E901B01D2FB001D6B10B11E9B00B10B20114102BB10611E9B01ED6B1140B1112B10903393900B1180F1112B2000106393939303136343633321615140623222714171633323637363534272623220607061C815D5B82835B593119274B253E11161A274A203F131877BE8B8A605E83E9612C4328222C5A602B4122212C000001001C0000016C01BA002B009100B20002002BB10106E9B02432B20E03002BB00A33B11D08E9B20E03002BB408060030042BB21D0E0A2BB3401D14092B01B02C2FB004D6B1210AE9B00B32B221040A2BB3402125092BB204210A2BB3400401092BB00832B02110B20417102BB11111E9B02DD6B121041112B10A283939B111171112B20E1B1D39393900B108011112B20B1117393939B01D11B01B3930313335323635113426233537153E0133321615140623222635343E0137262322061D0114163B01152623220E011C35191A348B0E3C31202A1B1012190B09030209373F18341528570C26321F0D20010C25131F0B6E2B432419161617140C130701016E4E9A1D121F03010200000000010021FFF5016801C00044009B00B23902002BB04233B10B08E9B20B390A2BB3400B05092BB21703002BB01D33B429080031042BB229170A2BB3402925092B01B0452FB015D6B00032B42C0E002A042BB1080BE9B02C10B2150E102BB02732B4360E002A042BB1230BE9B046D6B108151112B04239B02C11B1093F3939B00E12B710110B1B1733393B241739B02311B01D3900B10B391112B03F39B02911B31519363B24173930313735343E01333216171E013332363534272E01272634363332173637363332161D01140E012322272623220615141E03171617161514062322270E030706232226210106060705020F413B3839683C32162B4C5438260B060D0708030106060B01086D3B35101527181750222A5051412D0609030101140508030D840B0806060B4549322949130C10122364491C09070C0A0E650B080509792D1F111A0F0E05050F212A353B502B060A040201140A00010013FFF5014C0267001C006E00B21602002BB10D09E9B20703002BB10A06E9B00032B00A10B10108E9B3121607082BB0062F01B01D2FB01BD6B10B0AE9B00632B21B0B0A2BB3401B00092BB00B10B1050BE9B0052FB20B050A2BB3400B09092BB00B10B21B10102BB1130BE9B01ED6B1100B1112B0163900303113353E0237331533152311143332363D013315140623222E023511132E3D1501198F8F431D2619323112242E1D0190160241502EB81FFEEA6C3B353739365109183B2B011400000000010020FFF5021701BA0023007F00B21A02002BB01733B10808E9B21A02002BB415060030042BB2

035F130F0A217D0B078E0C071106023C0D18134E17022C0402090D00FFFFFE6B02E6FF35035E1007001EFE0C00000000000100000000B333D9B910DD5F0F3CF5001F03E800000000C65FA56100000000C65FA561FB91FE7D05D704460000000800020000000000000001000003A7FF0600C805FFFB91FE6105D700010000000000000000000000000000002102F8000A014D00000184006301840039014D000A01F4005901F4001C01F4002A02EE00200271002103940025022B003802D2002402EE001301F4002A01BC001C01310021022B0020011500210115002103410020022B002001F4001C0187001C018A002101840013022B0020020F000C011600760202001E01F4005F01F4005F0000FE6B000000A600A600E2011E013E0192020602BE035603D80496056A05EA065E0708077A07FA088A08E8092E09FA0A880AD80B5E0C0A0C6C0CE00DA60DC20E560E600E8E0E98000100000021009E0008009C0008000200010000001400000100031300040004B801FF85B0018D004BB0085058B101018E59B146062B5821B010594BB014525821B080591DB0062B5C5800B0062045B0032B44B0092045B20671022BB0032B44B0082045B20951022BB0032B44B0072045B20831022BB0032B4401B00A2045B0032B44B00E2045B20A16022BB10346762B44B00D2045B20E5E022BB10346762B44B00C2045B20D45022BB10346762B44B00B2045BA000C011500022BB10346762B44B00F2045BA000A7FFF00022BB10346762B44B0102045B20F6B022BB10346762B44B0112045B21030022BB10346762B44B0122045B21122022BB10346762B44B0132045B21214022BB10346762B4459000000
00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/hyphen 4 def
/one 5 def
/four 6 def
/eight 7 def
/A 8 def
/L 9 def
/M 10 def
/S 11 def
/T 12 def
/V 13 def
/a 14 def
/e 15 def
/f 16 def
/h 17 def
/i 18 def
/l 19 def
/m 20 def
/n 21 def
/o 22 def
/r 23 def
/s 24 def
/t 25 def
/u 26 def
/x 27 def
/bar 28 def
/pi 29 def
/grave.cap 30 def
/grave.uc 31 def
/uni0300.cap 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec

B38363440993B2E5BB4C87739910C1196F175B952CF9A85965545001F96FE4F2E599E99F43F8BD96205D32247852BA3EFE52ED3A5C2B0BEB31F865777247ECEC3C58501BB197F4A558B4FDEBD96D1E0A5555D0BD59C5DDEC310EF071184C3A1A2C852E71D993F7AC1536A7C94EED2E69EDA36FA33C6F8C923F25100E3EAB31A4455D18CA711E915C8DF7A960BDD8083CD1B9DFE6E40806BD442B8C41BE9DC61C886ACB55E75F9A72A2A7CA70F7D5B195CFA95214D32FBBAF677624F6444BE40A457D69B774A298EEC38C6C5824FE5757FE76BAFCC0033D790F02B6A205C1AD836AF6550547263CD0BD540797E141C8C3475480A11D393498B9132F4A7F74B4531CECAFE953EC5586B89FC696AA34BD54698A0E9F2AC399D0CEDF034255CECE4FF7376EACAC5C6FC8D01A23B46303C36C2FA4AE2792DE64370C886830D19F3F50366FEBCA2149AFA50115D4010379A732C5D8A828E293ADDDFA3D89CA84FAA85D96D78A7E4D58986E685A9FBF0C66D3811C5233B2513CC854C407EE50F744A1189A80F2A28CEA4A859F5FD3FC6079A3A6448ADB22129009DF6D0AF427749CCD55A98346AEA16AD0AE019972617090FF783626432BCD20676D1F412B61911A70DEA8335FA3D24FA5FB0F5841055E843F1C6013B83ABAF4E9A0EFC877CAFA73923F7F0147AA81B9D585D73AB9FCCF0234A3BB03646DCEFE77D4FAFB8CA5F26F1769B4D434C987EF28967CB74D316805C46EDBAD0DBF98138E71991628911F5ABC1565EF4B5E9F53D555BD883A02B8831BD37405CA36C952A5708D10280AB50ABC164898FB66A6EC2AEC378729DEECB7C861FD794C95255D0CB0AC7F71DE05239AF2E765EACB6037859CB29EB19D8CCB271C292834610C9438B8ED57AD5C3953283AA71FAA4B519C58B726F10E3BD8C4CBA7DFE4D1EBB5814BDF564E09DBD7E6E9C90AE8E34CA34643B54B1C7D77F755DC4C59EF03AED87E4459E9A84CFFF91D24166ECEB8D599227A66FDC5B50F0361ABC0D7B3F5E9985CEF514B3144A439F1C3734795D34A49B725C66D0E5E7666E865A489C4F7C5E22784C0D0D587C1887E5474F11171204FFD75C01E410613BE2485AA706CC945E1B6C9C23FDA178E158440E58670B69F98AFEF2A7E5029C6D7D779E419B0A19FE2394376B54D4EFC49EC5EB23A675722ACF5672BEE455B430CC665B8C66420D70EDAB6E485594E7BB601D09628EA3AE40E43D170E70B2489CA175560302FE90CFC218538AE49A16BB7690146B52021F873FCAF31C609F7F6EC19E50FFC03A75C7D3C3B2F46B655CFB28E784F726BAC173E16122E88B624A4A1B807CAF3FBF2A9B702F6837AD260408C3EB3908BF8591BEC3598D8D1761F8B360A3C97DE063A38379D32684E434005AE1C31C2A6381A19B88F3593F4567D794BEE95F4F3A463B4A6A240050CF7F1C1A4F805E9




B85BF10EC6F8E7F182C3B987415336C663D926F194E230BA4E90A63267C2D81890656F826BC606979AA7DF21D161406B403C9FCCF3A60417B12EEBAE4F702E1235100DA8D228DE0EBD185CA8BA9A3295463030CF11FA1FBDBD99A4AB9FAC2F71C7F2277F3A4C41A921F1198A9FEDA1063893E30B395FBEC94A77058564158002D60B346BF0E2D7A85392674A4691D85CD326F6EF8FDA2825CCB577A9916C3BFEDCEA4BEEDD5323A00D3EB4FFC73A560A2238BEBBDF3CFF0AE6275CF5D622C05CC9FEE5F5E07B80B9FBD4F086FADB622195A22C709EE32A24A37815E668756F2C575E32C5F4508C7A1FCD42F33177912C75E45115D77CAF50EB4B660AA270CF5D41FB9D02F2A8835EA35CA404CB9A519A310B1B22B23DE56EECA74BC6C040356F492B9B9DE36E0D499D8645925B44EC0758838C30C07C8175EB60DF8A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 488 315 rc
-1583.2538 1234.209 m
1921.2239 1234.209 l
1921.2239 -1297.8806 l
-1583.2538 -1297.8806 l
h
-1583.2538 1234.209 m
f
1 229 m
40 229 l
40 134 l
1 134 l
h
1 229 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 247 m
574 247 l
574 342 l
535 342 l
h
535 247 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 181.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.5440001 2.3000183 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
1.888 7.3000183 m
(")s
/Cs1 SC
1 1 1 sc
CM
1 262 m
40 262 l
40 229 l
1 229 l
h
1 262 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 214 m
574 214 l
574 247 l
535 247 l
h
535 214 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 245.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-11.326 2.3000183 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
-3.326 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
1 134 m
40 134 l
40 101 l
1 101 l
h
1 134 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 342 m
574 342 l
574 375 l
535 375 l
h
535 342 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 117.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-10.454 2.3000183 m
(&)s
/F1.1[ 12 0 0 -12 0 0]sf
-4.198 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
138 192 m
211 192 l
216.52284 192 221 187.52284 221 182 c
221 147 l
221 141.47716 216.52284 137 211 137 c
138 137 l
132.47716 137 128 141.47716 128 147 c
128 182 l
128 187.52284 132.47716 192 138 192 c
h
138 192 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
672 284 m
745 284 l
750.52283 284 755 288.47714 755 294 c
755 329 l
755 334.52286 750.52283 339 745 339 c
672 339 l
666.47717 339 662 334.52286 662 329 c
662 294 l
662 288.47714 666.47717 284 672 284 c
h
672 284 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 174.5 164.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-22.544001 -7.1999512 m
('\(\)*)[ 10.000000 8.880000 11.552000 0.000000 ] xS
-34.223999 15 m
(+,-./01"23)[ 6.208000 8.000000 8.000000 5.328000 8.880000 8.880000 4.432000 6.208000 6.304000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
1 101 m
40 101 l
40 68 l
1 68 l
h
1 101 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 375 m
574 375 l
574 408 l
535 408 l
h
535 375 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 84.5 cm
-10.43 2.3000183 m
(")s
/F1.1[ 12 0 0 -12 0 0]sf
-4.2220001 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -534 476 cm
574.5 294.34082 m
616 294.01053 l
616 311 l
651.60016 311.19244 l
S
0 i
CM
125.60004 164.76433 m
117.61637 167.80753 l
117.58394 161.80762 l
h
125.60004 164.76433 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
659.60004 311.23569 m
651.61639 308.19247 l
651.58392 314.19238 l
h
659.60004 311.23569 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
574.5 230.34082 m
616 230.01053 l
616 311 l
S
574.5 358.6626 m
616 359 l
616 294.01053 l
S
574.5 391.6626 m
616 392 l
616 359 l
S
0.60000002 0.60000002 0.60000002 sc
708.5 197 m
708.5 273.60001 l
S
0 i
CM
174.49998 194.39999 m
177.49998 202.39999 l
171.49998 202.39999 l
h
174.49998 194.39999 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
708.5 281.60001 m
711.5 273.60001 l
705.5 273.60001 l
h
708.5 281.60001 m
S
0.60000002 0.60000002 0.60000002 sc
1 0 0 -1 174.5 297 cm
/F1.1[ 16 0 0 -16 0 0]sf
-11.766 2.3000183 m
(4)s
/F1.1[ 12 0 0 -12 0 0]sf
-2.8859999 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.60000002 0.60000002 0.60000002 sc
1 0 0 -1 -534 476 cm
708.45221 339.5 m
708.29163 433.50662 l
S
0 i
CM
174.27797 34.493404 m
177.29163 42.48827 l
171.29164 42.498516 l
h
174.27797 34.493404 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
708.27795 441.50659 m
711.29163 433.51172 l
705.29163 433.5015 l
h
708.27795 441.50659 m
S
0.60000002 0.60000002 0.60000002 sc
1 0 0 -1 175 18 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.7680001 2.3000183 m
(4)s
/F1.1[ 12 0 0 -12 0 0]sf
2.112 7.3000183 m
(")s
1 1 1 sc
CM
347 262 m
477 262 l
482.52286 262 487 257.52286 487 252 c
487 211.24419 l
487 205.72134 482.52286 201.24419 477 201.24419 c
347 201.24419 l
341.47714 201.24419 337 205.72134 337 211.24419 c
337 252 l
337 257.52286 341.47714 262 347 262 c
h
347 262 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
881 214 m
1011 214 l
1016.5228 214 1021 218.47716 1021 224 c
1021 264.75583 l
1021 270.27866 1016.5228 274.75583 1011 274.75583 c
881 274.75583 l
875.47717 274.75583 871 270.27866 871 264.75583 c
871 224 l
871 218.47716 875.47717 214 881 214 c
h
881 214 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 412 231.62209 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6 -7.1999512 m
(5)s
-49.287998 15 m
(+%.6107#&./01"3)[ 6.208000 8.000000 5.328000 4.432000 4.432000 8.880000 7.104000 8.000000 6.256000 5.328000 8.880000 8.880000 4.432000 6.208000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
347 132.75581 m
477 132.75581 l
482.52286 132.75581 487 128.27866 487 122.75581 c
487 82 l
487 76.47715 482.52286 72 477 72 c
347 72 l
341.47714 72 337 76.47715 337 82 c
337 122.75581 l
337 128.27866 341.47714 132.75581 347 132.75581 c
h
347 132.75581 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
881 343.24417 m
1011 343.24417 l
1016.5228 343.24417 1021 347.72134 1021 353.24417 c
1021 394 l
1021 399.52286 1016.5228 404 1011 404 c
881 404 l
875.47717 404 871 399.52286 871 394 c
871 353.24417 l
871 347.72134 875.47717 343.24417 881 343.24417 c
h
881 343.24417 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 412 102.37791 cm
-4.112 -7.1999512 m
(8)s
-70 15 m
(+9:9.2;<"=#!./01"23)[ 6.208000 4.448000 12.000000 4.448000 5.328000 6.304000 8.000000 4.880000 6.208000 13.328000 8.000000 8.432000 5.328000 8.880000 8.880000 4.432000 6.208000 6.304000 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -534 476 cm
755.48114 298.22223 m
861.02429 268.39368 l
S
0 i
CM
334.72275 209.78204 m
326.2084 210.49324 l
327.84018 204.71939 l
h
334.72275 209.78204 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
868.72272 266.21796 m
860.20837 265.50677 l
861.84021 271.28061 l
h
868.72272 266.21796 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
755.4837 323.78937 m
860.93848 351.37283 l
S
0 i
CM
334.6781 122.60274 m
327.69766 127.52952 l
326.17932 121.72481 l
h
334.6781 122.60274 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
868.6781 353.39725 m
861.69763 348.47049 l
860.17932 354.27521 l
h
868.6781 353.39725 m
S
ep
end
%%Trailer
%%EOF
