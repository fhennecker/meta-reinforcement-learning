%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 153.000000 187.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 153 187
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 153 187
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /N put
dup 34 /e put
dup 35 /t put
dup 36 /w put
dup 37 /o put
dup 38 /r put
dup 39 /k put
dup 40 /V put
dup 41 /parenleft put
dup 42 /s put
dup 43 /parenright put
dup 44 /pi put
dup 45 /I put
dup 46 /n put
dup 47 /p put
dup 48 /u put
dup 49 /comma put
dup 50 /space put
dup 51 /a put
dup 52 /hyphen put
dup 53 /one put
dup 54 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<




3E11161A274A203F131877BE8B8A605E83E9612C4328222C5A602B4122212C000002001CFF3E020901BA001F002E008400B21202002BB12508E9B21F00002BB10006E9B01A32B20C03002BB00933B12B09E9B20803002BB10706E901B02F2FB003D6B1170AE9B109203232B217030A2BB340171A092BB203170A2BB3400300092BB00732B01710B20328102BB10F11E9B030D6B117031112B01D39B02811B1120C393900B107251112B40A0F15282E2417393031173236351134262335371536333216151406232226271D0114163315262322071314161716333236353426232206071C35191935903C50557C845B324306193569080A6693040A284139574F37274416A30D2001D421111F0B4242845E5F84331309A8200D1F030301340F0B103D755854752A260001001C0000016C01BA002B009100B20002002BB10106E9B02432B20E03002BB00A33B11D08E9B20E03002BB408060030042BB21D0E0A2BB3401D14092B01B02C2FB004D6B1210AE9B00B32B221040A2BB3402125092BB204210A2BB3400401092BB00832B02110B20417102BB11111E9B02DD6B121041112B10A283939B111171112B20E1B1D39393900B108011112B20B1117393939B01D11B01B3930313335323635113426233537153E0133321615140623222635343E0137262322061D0114163B01152623220E011C35191A348B0E3C31202A1B1012190B09030209373F18341528570C26321F0D20010C25131F0B6E2B432419161617140C130701016E4E9A1D121F03010200000000010021FFF5016801C00044009B00B23902002BB04233B10B08E9B20B390A2BB3400B05092BB21703002BB01D33B429080031042BB229170A2BB3402925092B01B0452FB015D6B00032B42C0E002A042BB1080BE9B02C10B2150E102BB02732B4360E002A042BB1230BE9B046D6B108151112B04239B02C11B1093F3939B00E12B710110B1B1733393B241739B02311B01D3900B10B391112B03F39B02911B31519363B24173930313735343E01333216171E013332363534272E01272634363332173637363332161D01140E012322272623220615141E03171617161514062322270E030706232226210106060705020F413B3839683C32162B4C5438260B060D0708030106060B01086D3B35101527181750222A5051412D0609030101140508030D840B0806060B4549322949130C10122364491C09070C0A0E650B080509792D1F111A0F0E05050F212A353B502B060A040201140A00010013FFF5014C0267001C006E00B21602002BB10D09E9B20703002BB10A06E9B00032B00A10B10108E9B3121607082BB0062F01B01D2FB01BD6B10B0AE9B00632B21B0B0A2BB3401B00092BB00B10B1050BE9B0052FB20B050A2BB3400B09092BB00B10B21B10102BB1130BE9B01ED6B1100B


00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/comma 4 def
/hyphen 5 def
/one 6 def
/I 7 def
/N 8 def
/V 9 def
/a 10 def
/d 11 def
/e 12 def
/k 13 def
/n 14 def
/o 15 def
/p 16 def
/r 17 def
/s 18 def
/t 19 def
/u 20 def
/w 21 def
/pi 22 def
/grave.cap 23 def
/grave.uc 24 def
/uni0300.cap 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA4055EE8746D9A2C65433B2267FD1CCC371F46876341E35392177C0263EEE28CFA476D20D38BDD67E0F74A687175FE2AE507B7E5A24573D3A365AD3CADF1CE52F9F178E91B06E77BB67DBCB6962CBE5DA4C61FF8758CDB14E1B14FA28E4212B74D089F48B4E3710E43DDFD5E10C5670C12FA62F46B9747B6D7BF86BB32AC304A9C539A2179A72266280333FC2D00DA6CD98F2AA42D124B3D5E5203CC99C91A3B026A7E4DAE6D22C9A963E04E8ED23646A2148E2F8F552AF5A6269B4C4C9093980248ED377530EB005499E423D48F2D8AAA68F4398B93BF7D9B9215B038BB204145481A8571DAD208CCB980296E2A67F39271455C8CE1A1F4D284080614CB02F908AD534733C761725098822A06C327DDE11C12E16EDC5284EADFF6D7825C08E4CEEAF53D4948E0F61167835EE5DA5251CD2913453B4D3F141C825F716C915238E884BC64949E8EF25D68428FD8FB87A489E8DC9DEFE72BDF622A8C833C024E6C61FEA385387A4694D8F3FBD8D4E7EF8A2CF4CE14A3A730A9904EC79F1DBC12567D4736F513E3798BA7A937DD21FCA038428209ACD30D5264607AEDA41725023366F944A404982A503DA7A913D1743AF32919EF57EBA5A9BC1FF16803922DA5A7ABB786F7A8A5580140DFEF8FCF0614FFA4B30476BB02D8835630CA3B7E8AA03E9A3E4DE511ADC0AEBB06EAAB6F8B9779ABD42943D1E057EE1D44309A0B6ED52C10CF7B194D66D84F5F390537DBEFFBC0AEB60724250B9ADBD9877E09875FCC81B519C7733F5BD7AD759B58B589930C14BE48EF

90A3804DE3FC36B0EDB84459E0B1570D824EC47759969CC36EF557E73AA3788C6900728288029F215BFAEFBCF4557301F2C012E5158AF2430CBBF264F7980A6824DB9ADFF06296D9D3965003656F81C081110E5ECF10772C2C6ED6CDEB65816E61DE5237669368A9AF8C2A1043D97D4C5011A7B8B819535F6A4FEDD41FE4CB53FF1F4CD9239424B131267CDE7C5C1BCE2BF0A5E7D821BCBA7FBBFE0238445A49125A32FA08FF680807C2EEAC6DB6468B6D952A73F7AE6B152F93E59144FA4580058ECEE5B1A0001AD92A67F4693AF17F4A3B1CD10CF8FD4F264D95E86E8B43F60EA38BD26355F8D3E09D25AA345E9BBABA54BB80106231E176B748168058D3D41E8976027385FC8749D6CD8D192008669FDFB72D1A131F3AB6FF4924A3354836C1CB016A3345147F45657FC1755B9D0A1391ADBCC4ED6F1D4194762E2867229FF25C171B18EFC37BA344C28563FF92B138329302EC3AF7115986295DC1513EACA3E7D51B3FE00A74B4043D161F9A268C18858338E7BFEB58504AAED5C7DD35684CCC8EFAF0E026E8DA33694494BC6A14B5AFF0D8B9F1553E1D6C72AF9473CAF01AE09564E52B0F25AEB14279CF67C911F817BA0381606D76829293B4F43CE66CE6315262E89877F5B0D333968C19C107D4CFC4C57BAC615BB10344E5CEDF1BC6CB39823BF52CAC94A35B8438BC4F1054E6C32A1CC25D8DAF48B382279A6A615D108419AA2339B5283D5810DF031BD6C6506C49AACBE695DB5A9FAD778936850EAD011CA08EE5B09E0AF291673618A6A6B5DCD993E33F122859DB62BA3831147CE5BDDBD9379626D75FE0BB71835CF6F20881CF2192A37CC0F36A2205DD187512146AC5030DA2731FF3C6E9584B73578388D1F588C0AE6EEB126A4049CC2F3FC5407A3BBAB99566D303EDDC669653213E33D1F57577ED499370D1850792E7C4A59C6C88D08C10C8D1F1FA913AE55A9850210E11DEC56DBA2EB877938428C8EA19BC3CE062541C41613316B23AA4A4DDE451C3E872385B95345DA1D5E1C3A2E83CD1E51953C017C95BFBE09E4CAB6FD8A8F7B81F018BABD3401689038B3F562DC1A53D7D06B77FACBBC50CB752902C15FFA4B71F78F6A3FFB9EF932F7954AC1BA6B1F9E8E574431078242468976A70F8E34B557F35DC51C75099EA499FCC33BC62BD806E29A740A4EFC9C32899942F3CD7F1751729C1EE6FDDD31C7BA9CD31498FD32B0124D3F6058CE4346D58E6FC583ED021EBF42CF2434D54F4FBE72EF368B8CFF41A372BCF4048DA1124339AFDAD6E547442059A5AEC318FC1F73C4C6AD9ED143495E5465E7F0B7D700A5293522687A92A37A5BA3393D9EF4A5D5B4870332416E175355C92A61183E0BD5BC23B8519DA3191DFD0A98E4DFAAAD8CBB4451446B3AEB2FF25AE94FFB2FF91BC91F77B2B4DB2F879B8DB63B6846BCBEE2D6863B0
266E6288E6C1703D9A92C8E41130A8893DA619CB27CD59B718D9FCF2E776CAD3A7FE409A058E7C9E38947DF5BE213AD8DAB317D4FD88E3C1196A52191D875A983D063AB6FE83729E0AE57F2BA5AEC84E33C9DAC5E8043C97B3B1333B0EBCE4C651893461F3D2A34357F6AD47150899D71BF8EFB19340BA3EA21AC66826BAD54C178A02AB979E6078CB111661058B78F5F0C774F1B5F07576D682F7B4925C8539A32BA0A5CA14230799A7D48CD3C996091BD8E27C26E7B63EF3FBD29193ED89C6D44641281708554966B806A482DFD05E858B38CBA43196B77C76F11593DC6B1E3253D4B102CFDF484A6A9F032EEBC62391F057EA916CDD5706655F81A0620EBEBA9B7E5CAAA814EB0D04655BA3DA746994EC36C47F682E35D9CE64E6818EFFF63287AFD4FD5866D6ACD8EADF5461BDB1A2D84252A0B72D8B17340EF4E6F8394E1E886F152174634DB1F86342DAC797B68FE2BFCCA0ECE37A521F150ECCDE3C9EABBED46E092C66787F47BF4BDEBB3BE0E5FCEC447F75DB86F79D711FC52AD2F586293473DD4FB4266D7D0E6A6002378BFE2E7536C85FF94FD23948136420B0E480B804907C4716D96016FD043633B93D9796DC4EAA866BB42040A82D22862955E4BB84803A20831C315A82346B64DD41156A84C2FA53CE7383A63ECFA8CA761DCFA5C13A0D8F9F1ED29B2F9DB351B285A0780EADB9E778A0A46F6CDAB2A5E67B8060A53CEAD529DDEE62DA6F66AF10CE6F6C78B6E5EB1DEE47F21C00BF29A18DE770ED47DCAD29316D7C8EED7844A912428AA4E173643388839BC0C3604D32C2851EE06D20303B3CDF82059A6180E8F94A472D300D10ECB8810B585481EAAA3457DB6719D3217A6ED451925D5F23ADF5AF2A1D1DEB0D3418A4F38FD7FE83C8D9CBA44147684BB7F97A6C5D34CE40A86E9F545F4D24C82193D53928F45FE820F31424B5F72610FAC0A1993DF977D75EC7EFEBC298093EB283FECC2A529718FA6EC2BBA6C12D0C7034DC55EF25F301E6EE9A300A359943C07347E32C0EDB2C80F4131B55D95B664F3862150417C7FC90C491DB0CCF772F03AFA96A81AF9FADF844004417267AE761802A761D0C34C44850856FABE3B1B9A833C1256870D58B659A1142836C30F718F63B6CB573FE5A816706E718933D9438864EDBD204D4C91C289AF4B0233531AFD47658AE50771268FBAD4B301E79C15E88DD6AB6234B40751B3E614C2320ADB9B09798C49EACDCE73F5F69F5652CB1A9DDBBAB49B67A5166B4B233DCFA44A91212378E2CAD8F298EB20EB2E7E3B6E17629AD3779524D783F3477EB50C240E44CD076673BD1B1A2E4E4E4193C45335B11733AE80BAB956324161C6461EA484E55799797607D50091DB46B4402CEC081922F9389055A3E1A8CE7A7FB76E4FCEEC32FDE33D8FA251D52F74C84077A7B628D426DC43351110A6861
26190B6DDB2B455E1C72FD4EFB814873EB30F64DA48FF1355C0A0D57F63F8427FAAAAD6EFBBF463D3198B5B985813E80CC945E622F113ED35A4352A6CA47D55C0C1F57236CB7612F1294CF59B34B1F2AE53FCA418E839E31E936FAA008BFCB3350E92F906C3426216A9CE27BF5D4AB365EC3978D974CB5808A20929E4E6C30D77B068F1EFF743C03DF8E36702D9D3A351DD3401652AB09E5D634D5F15293B5208BFA037B9E52F5EDA71B3713479001AC1696E0E2A9A3427DD0C3CCF4B3F69410CACE047FBF89744F2FF713D45771C1F8C0E6CDD9E118151E1ECE51F98F2BCB2720867E3397B36FB3E308867EAEDCF7F8E56466C8EC8B810A6A139B428F73AE1EAAB8A426D53623AEF624414ABB5AE8D9C907B0AF0C815A65B7294B2C5ACC13EDD3ECF94972168C217FD3F30A6BCDEF9518874A0C807B970EC193D1E7E24AC5E86E96FA71D288ED2A10598DC16D9E9A8784C908E9E060AAF6211AF46F7AE1B676FFB20EF5600EDBF1890639F373FA0BCD5E1F3DE157E90E4C86EACA521A4D67CCB323279A11F0D130AF6CADE1B3815B6A611B967E7BB05112F94BCCAF0CDA2919CC1614D00652DEFF8F156977DFF33DB1D11B2C524E2669AFD273B6F7D6A400ACF9510961C0ED4F08BAACC19A32FFC2C951899519BA8D988CE5991A155FA0EBF2A73D3D142EFDF486718C77A914A45ACD94B3C485E4BACA3176B0F8BC3CBE42401F604E0D2DD24C4270F58707A26FBC0265735F92DE0D7393892CE457F245E0574C1C6B6168F11EB7BE4463636B902431DEEBF9421248B5593F9AF3BD947408B897AA977A45758101349ED256C14A6E8ABFFA77F5C444A57A1566A0322569CD30FC5B2735ACD97B39584D763305E44682F95F6E3D517CB5C9E68B6173E51FB4A0652D3F608776E6BC612E3C157DE8521D5DB8B564FE6CDDB25C6FD9BD63161177A05CDFDCE93F93A8440BC919FFFCC47356A34012E96FC93F3B36E0027A6B60ED8F067BAE1583E0654E4FCFCE25C2A54C750ED57805C1624923C6C3EE89ADE5EEC25DB264F3032B20224C66D6FE134FA307BD67A573C906155374BE34DE09B98D9C596FA275039675948A4D1D70A6693A02FA77DA0CB9B5C42394E09A29D0CFA09EBE955B5ED99947A958A7D73F524B2745B7452F25A58D20CCF812D3FA5DBF5CB0D3BC1FA11FDB9580697D9DC23752D8F1680616B62D8746056BB527F03159E82302F0B3A37AD30585F23C6A6479DC54D7AC68BFC05A0AE0F1BA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 153 187 rc
-1859 1729 m
2359 1729 l
2359 -1319 l
-1859 -1319 l
h
-1859 1729 m
f
27 111 m
126 111 l
126 73 l
27 73 l
h
27 111 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
480 602 m
579 602 l
579 640 l
480 640 l
h
480 602 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 76.5 92 cm
/F1.1[ 16 0 0 -16 0 0]sf
-29.327999 3.9000244 m
(!"#$%&')[ 12.000000 7.104000 5.760000 11.104000 8.000000 6.256000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
0.5 186 m
66 186 l
66 148 l
0.5 148 l
h
0.5 186 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
453.5 527 m
519 527 l
519 565 l
453.5 565 l
h
453.5 527 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 33.25 167 cm
-15.36 3.9000244 m
(\(\)*+)[ 12.000000 6.208000 6.304000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
88 186 m
152.5 186 l
152.5 148 l
88 148 l
h
88 186 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -453 713 cm
541 527 m
605.5 527 l
605.5 565 l
541 565 l
h
541 527 m
S
0.26025039 0.26024261 0.26024702 sc
0 i
1 0 0 -1 120.25 167 cm
-13.472 3.9000244 m
(,)s
/Cs2 SC
0 sc
-5.2480001 3.9000244 m
(\)*+)[ 6.208000 6.304000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -453 713 cm
518.29358 601.56683 m
502.40204 574.00934 l
S
0 i
CM
45.405598 145.92093 m
46.8032 137.492 l
52.000893 140.48933 l
h
45.405598 145.92093 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
498.40561 567.0791 m
499.80319 575.508 l
505.00089 572.51068 l
h
498.40561 567.0791 m
S
1 J
1 j
0.60000002 i
540.83527 601.56812 m
556.92645 573.98328 l
S
0 i
CM
107.95744 145.92693 m
101.33514 140.52832 l
106.51781 137.50508 l
h
107.95744 145.92693 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
560.95746 567.07306 m
554.33514 572.47168 l
559.51782 575.49493 l
h
560.95746 567.07306 m
S
1 J
1 j
0.60000002 i
529.5 675 m
529.5 650.40002 l
S
0 i
CM
76.5 70.599998 m
73.5 62.599998 l
79.5 62.599998 l
h
76.5 70.599998 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
529.5 642.40002 m
526.5 650.40002 l
532.5 650.40002 l
h
529.5 642.40002 m
S
/Cs2 SC
0 sc
1 0 0 -1 76.5 18 cm
-65.666496 2.4000168 m
(-./0#123)[ 5.776000 8.880000 8.880000 8.880000 6.208000 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
-9.2825003 7.4000168 m
(#45)[ 4.268000 3.663000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
4.1485 2.4000168 m
(12&)[ 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
20.164499 7.4000168 m
(#45)[ 4.268000 3.663000 0.000000 ] xS
/F1.1[ 16 0 0 -16 0 0]sf
33.595501 2.4000168 m
(126)[ 4.432000 5.328000 0.000000 ] xS
/F1.1[ 11 0 0 -11 0 0]sf
52.2355 7.4000168 m
(#45)[ 4.268000 3.663000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -453 713 cm
564.53143 601.75928 m
564.53143 589.85931 l
564.53143 587.77734 l
589.98828 587.77734 l
598.5 587.77734 l
598.5 658.5 l
564.89929 658.5 l
564.89929 652.13873 l
564.89929 650.13873 l
S
0 i
CM
111.89931 70.861244 m
108.89931 62.861244 l
114.89931 62.861244 l
h
111.89931 70.861244 m
f
0 J
0 j
1 0 0 -1 -453 713 cm
564.89929 642.13873 m
561.89929 650.13873 l
567.89929 650.13873 l
h
564.89929 642.13873 m
S
ep
end
%%Trailer
%%EOF
