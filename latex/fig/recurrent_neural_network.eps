%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 147.000000 186.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 147 186
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 147 186
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /h put
dup 34 /i put
dup 35 /d put
dup 36 /e put
dup 37 /n put
dup 38 /space put
dup 39 /l put
dup 40 /a put
dup 41 /y put
dup 42 /r put
dup 43 /p put
dup 44 /u put
dup 45 /t put
dup 46 /o put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/a 2 def
/d 3 def
/e 4 def
/h 5 def
/i 6 def
/l 7 def
/n 8 def
/o 9 def
/p 10 def
/r 11 def
/t 12 def
/u 13 def
/y 14 def
/grave.cap 15 def
/grave.uc 16 def
/uni0300.cap 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA4055EE8746D9A2C65433B2267FD1CCC371F46876341E35392177C0263EEE28CFA476D20D38BDD67E0F74A687175FE2AE507B7E5A24573D3A365AD3CADF1CE52F9F178E91B06E77BB67DBCB6962CBE5DA4C61FF8758CDB14E1B14FA28E4212B74D089F48B4E3710E43DDFD5E10C5670C12FA62F46B9747B6D7BF86BB32AC304A9C539A2179A72266280333FFBEFB2A36BD542A178A197244D92C79C81000E0F616803A358A9F45761FCD36CFB06A7FD198521B2E9238DCE48F4FBC3A93B953EABC238DC72D5B451576671A70B981D205DCDA0D96C9F05E9FBBFBFCEEC074F4A549697133EB55EE3DF0C2803ED383C7919FC46218C6CB2A69CE62ED023666EB3DAC6848E9A664DFCC4E2D4B71E5CF76EE82A6553FC89228359ABC46FB914416F532D5EE8BABECDF79CE6490630791A13399227B5376ACCF2D2EE2B58DAED8E3E70BD91F235402992E37661AEDEAABF889E54330B4208E8EE860C8C3D67C5E89FCE6938980A026B4DA5F50F428BB9448C330CF2A03CAAEFFECDB179A2797A0A0628ED64F1864E5101EBF499F6C191BA584A4A6D0A735E5D0B041E630B36D75D219BC94C456259ABD774607CF53F23C852E564FC21EBE23EAC75ACC34875579B89B2A73E576429C0E8A2228F554C950062FAFD1B0E51D824912D5B49B5A7025959BA48A207F28E013685282F5573AE175EBAB142698905450AF6E425545365F56BFFD505AC7C9A1A5A4B0ED1BC8D02DB99F55DA78168E2BFDD8DFCDC1F5B6EDCBDED563C06A46A0F66AA9B5C0EB9B5A58E21DEF8B
11C512E178DCF78D6B91E6858EEF76EBDA13778A199F71C9DBF12D2AC3648D355C086D5F423237AB18BFD026AAF991462FFBA8D5C1A904635DB1A3E9E8ECEBBE393A1278C65977CAE9E6B79093AA5818B23E76EE5CEDCF30F07EF9BEC07010E870EE781584C3D2C1BDA7E26DC4455C1A3026BA66AB561AD13D488F0AFAC8200121CCEC2E2090AEFCD1EBDCB20D3C40924A258588170B9C91208528397AB76D2CA6C634EB41664927DC85288CD9EB64EEBEF604DCC4529DBAE14C19D9D52373F4D44254B5448594C920B4FA37C6CC4A2EA8DEF23064B81B9C39039C534968788C73B8714DBC0C8A549E0980B4365436FD90066712486565F50BA3B70FF46561ADECA183152944FC9A43C4399DDFBF4710461D9B34FD8DBB478B6163EFFCB3CBE4309728C95177CEFD059700CC8D8D7DF565D895C30582D48A876829A268243E95BEBED5106FCEAD122877AFE88B32ECFB86B554249CB5D35BE9DB8BA234A0EB1683BFF5E1F29F187C765DBD9A6F6B1C6745B7E5D75AD73829DF34FB2C1EA514BEE89D920AB75CA81D48362C21B92B8A6540989F5733E14BE7F10BB6CDBD8EB7D80D59ECF4F12AC4AF9EC2E811923A69EE822CB4E2BADB071EEBB19B8016AF18CD93E4A34A20166A074DBAB251BE7C7DFC0AA6E247F830B2F0DDE406F688D449D42BB49A3831F02F0723A2C6225FE1DFED158B72E572822F07C1A9DE5CBA941CD20C0ACAE895B4D4B5CB5C2037347F4CE1A0DC1FD2BD7D7BEC951DF735DA0091A209D5CB100FC44519C351BEA740EE2D32A864A8C9EF56230D8386620777D5BDCCA672D7DC0AF7E7078513CC48D774C49545902361338A4C812546F16652C624019689E4775F42E4FF6643AB5754C28407B1C5369DDDB8848F072F0C3FC262CEBC929E9E61AF7F757388C01BEC0F7DB50101DC3F0E819AACF5D43B909033C1F487F55C7D7744AB486095BB252D52397D200DD2D81350CBDDB3BFFBDF3D766058AB2291040F96822889287922B53B271513AAE452EAC96AFBD4DFD6B659AE2FA4D812A32EB5483D786AEF7CCAB10E15222134B3778B2DE7FB7FDD1462E004AA219E6298567FD7D360A115D6D9E7523A9AA6D7F11395CCF63797A8F824DCE46381DA39C807FF5EED52EB99F215DE0C5CBEB2FD8495C886B68FFA51D6FD1B75EB5C44EE68390368DC83D83FDE2FD3D6737C0E2A708FE9AA767E7F39AC2633F9BC23F97EFDD2252A7603CAA25515140BEDC032D3596D43DBA759709E6903501D7B58C15FEC1D6F3DE023C86824913B209AB30F3C37492D1194B6F719728DD87EEF9EB9B31FB998D9BD392C0FE1E870978241DCEB42DF9B15C7B01C31BE3468043F16310B8B05949B41BC9F8CC878B038273056AC3BD66CD3A38DA97CA1D3CF1C4729A6678FC413DB30733B33593E56229B3E6C1214F7A4E91D4A05A7509CC71A16F409
A21A1999F741F4B32782505F25EDCBAE29D3F75ED60B6D449895EA1FDC18B7281DEF7C90DD04B16991FE13BF621827E1193C38A6979CD1426FCA9F30B618410F7512E4C58A92419DAFB3771356FBCD087BCD78F2DB489D4AD68C65DFCB46981728837BA8A1C93E7C042A4292646436B3A9FFFF7CF054CAD22DCD1D296A61B37F70687DAEA971C34100FFD142E617A5D412FA482EFB18E2A7B318A03CDD68D547DA73423C6B5E11BED0D07D4BD77E7C5BE4698F38AD8DBCDF890C8350E1BC3C83B271EBE63C7F3D354F89C07ABA513CDDF759FB08A500B89E828D1EAA59CA7DB914A77749C6B64AAE0FD41FE63669E73510703C49699BE2A610E8AE074A9ADD8765F90598958CD6416F750ED6D424B0802677E643E9F3EF2319EBF8BE4B5E696B46E6AD1CDDC0D995794C4EB0FFFB3C7B07726E0ECF157F437680C05B5A782DEB851C5B6937E1AD499E9240ABE12F8BD34AF29DE14A2C9D4616CBD1EE48F73FE7216E49474C53594D8CC97ECA8BC183335C26C310DE13F7E83C338D694ADC605CE8ACACC9A779160BA556CB38D30F40BD46EEC2CD8667ADC0818BA6E4521A84B67DACF299FA8FFC7B6694BB348DA033328F2FBA87BA75AA0186069CAEC4F5B03CE2FDCF471C64ADA4EF7AF7E79C34D9119A9AFF9A6676F971C2D866A573C79B2116C1F641A1B1EA1658FDDF3EC5D53FC5F124F000E663A7DB8F9FB552A36657E907D17DEC1BACDD0448FD441D30E5D10D15CBF0A8A4556F9566504F9D2FA193F35B7DC2A7C97EA20252034FF2A915E63221B5F3C18F70EFB1308F1CE3A3540ABCD667CA3A6A3FD603B5C90946C0276DBF5878CCF55E716D408A236ABA68F3B16CC667F5DEBDD647C56EAC039E5532F8E51B6EB40AC93E7A7EE36D5242B77B72460D007370F2F390246ED463ECC9E09942DEA54C8F17F1CB9D715F121E8C0CCF71AADAFAB651B22C213FA7B6C27DE4FB71ECDEECB4E0C6564E91D42667DDAC96C126F0E9E8C97880760768416BAA02F21DDA5D6686CE2224BE6F3AD8B064AC6F35FF67668D6996F1B5CD3417AEEC431BC9656523F80E1E25F78C4F990CEA3C74CB3534D097778CCE6BF5B53F13EB30F074FE893E1C07DA9E63D278E60790FB3E956033F205946284F5B326B502D26D7CEB585744A8A10100F15C8D4BBE3C205515DF5A88E3C31AA15066741FA6BE3BD908B3FD8B46A6037F32738AE8453902EAD4038C1B94FA01FCA9B69EEAC152FDA01EFF260283405FF605C27A7204926A4D7160AF7DB07F95C017AA05A0163115B9CEF762C4D2DABDB23866CB2A71C87521C1CBDD222051AB8A6CCFAB2C75A385FB73602F3C5C807E41C6545CE5CB0AF5AA8D5623D7BBFA76EF4F1A9216655D7271F0BAC3CCD7576DD6B689CAB1CC62375DF162A958FE4101D433FCD14FC733416041DD5A9B629D2C00B45842613F586ACF47
E03444ACA79621B00AE64FCE1E2EF58D7958222AF98E01F847929CEEEBB7725B3E6893790DD736A89F5B61D80A8667B01EF9BA06735F6E5177B0875890F08C2EC2F305510EC6D1FCFB5D62D21D8EDAA90E3C38E06F33379E33862283483B427859103559D01659644785F42DEF1569588A02F92E92C43A8325D1A88BC10F51AB29E549E3E1D1CC16950F45CB492FCDADCFBAF2AA68E8CACB5A13BB1D46D97C70F03471C321EE78862B2D5E04EDE11234BCAE87F9DF98636B1CADCD000DAE7D50517D8F17C60CBA59949B98D7FE14DC06E0753C1DA880D672D3809358F98D0F75EA95E0A0494EAD094E735EB8D79F637BB1C837FB3BEA39984B5786E20CE42B2B78137AA5084890273ED8572DC9E7764F9D29348871D7B438CCE7BD646E565E1E003DCC7C084ADD1D972C8B81EA708AF2D42F1B2177D0DB4D11C76AB29A2EE150E165B8AD091001C29EFCB587C7CFD4E34315DEDD95575BA973CCFACD861801C7873C5ABAE16312837067B86C5D02CFC0EE8EFC56E06B065CA315A478F3A4B1B1F1C42165534D6C7560C96DB31A930A7077D3CCDEBF6F40B1E5E00838F2AB2F872AD003
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 147 186 rc
-1271 1363 m
1840 1363 l
1840 -1454 l
-1271 -1454 l
h
-1271 1363 m
f
0.5 110 m
123 110 l
123 76 l
0.5 76 l
h
0.5 110 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -234 424 cm
234.5 314 m
357 314 l
357 348 l
234.5 348 l
h
234.5 314 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 61.75 93 cm
/F1.1[ 16 0 0 -16 0 0]sf
-42.855999 3.9000244 m
(!"##$%&'\(\)$*)[ 8.880000 4.432000 8.880000 8.880000 7.104000 8.880000 5.328000 4.432000 7.552000 7.984000 7.104000 0.000000 ] xS
1 0 0 -1 61.75 17 cm
-18.639999 3.9000244 m
("%+,-)[ 4.432000 8.880000 8.880000 8.880000 0.000000 ] xS
1 0 0 -1 61.75 169 cm
-23.528 3.9000244 m
(.,-+,-)[ 8.000000 8.880000 6.208000 8.880000 8.880000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -234 424 cm
295.75 390.5 m
295.75 358.39999 l
S
0 i
CM
61.750008 73.599998 m
58.750008 65.599998 l
64.750008 65.599998 l
h
61.750008 73.599998 m
f
0 J
0 j
1 0 0 -1 -234 424 cm
295.75 350.39999 m
292.75 358.39999 l
298.75 358.39999 l
h
295.75 350.39999 m
S
1 J
1 j
0.60000002 i
295.75 313.5 m
295.75 281.39999 l
S
0 i
CM
61.750011 150.60001 m
58.750011 142.60001 l
64.750015 142.60001 l
h
61.750011 150.60001 m
f
0 J
0 j
1 0 0 -1 -234 424 cm
295.75 273.39999 m
292.75 281.39999 l
298.75 281.39999 l
h
295.75 273.39999 m
S
1 J
1 j
0.60000002 i
311.53134 313.62991 m
311.53134 301.72992 l
311.53134 290 l
333 290 l
379 290 l
379 339 l
379 370 l
333 370 l
312.33252 370 l
312.33252 360.26157 l
312.33252 358.26157 l
S
0 i
CM
78.332527 73.738426 m
75.332527 65.738426 l
81.332527 65.738426 l
h
78.332527 73.738426 m
f
0 J
0 j
1 0 0 -1 -234 424 cm
312.33252 350.26157 m
309.33252 358.26157 l
315.33252 358.26157 l
h
312.33252 350.26157 m
S
ep
end
%%Trailer
%%EOF
