%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 435.000000 414.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 435 414
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 435 414
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Bold
%!FontType1-1.0: CMUSerif-Bold 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /I put
dup 34 /n put
dup 35 /p put
dup 36 /u put
dup 37 /t put
dup 38 /space put
dup 39 /l put
dup 40 /a put
dup 41 /y put
dup 42 /e put
dup 43 /r put
dup 44 /H put
dup 45 /i put
dup 46 /d put
dup 47 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1338 1 index div -401 2 index div 1738 3 index div 1115 5 -1 roll div]cvx def
/sfnts [<




19270E0415291D1930018D2F03032FFEF2F605070C2F03032F050709FE373146360000000001002F0000011E01C2000E004F00B20002002BB1010BE9B00932B20803002BB40606005B042BB00610B1070BE901B00F2FB002D6B1090EE9B209020A2BB340090A092BB202090A2BB3400201092BB010D6B109021112B00D390030313335331134262335371133152623222F45142EAE3E6C091D2F01351C0B2F08FE6D2F03FFFF007302DD0156036B10070013000000F10000000100D202EA016E03860009002700B0082FB40306000D042BB40306000D042B01B00A2FB001D6B10612E9B10612E9B00BD600303112343633321614062322D22D21202E2E20210318402E2E402E00000001007301EC0156027A000D002700B00C2FB403060011042B01B00E2FB000D6B409120009042BB00FD600B1030C1112B0093930311334363B01321617161707262726732117010D183C2B1E1010883B023B18270D261B132D021508FFFFFE3402DDFF17036B10070011FDC100000000000100000000B33318E061C85F0F3CF5001F03E800000000C65FA30800000000C65FA308FAC6FE6F06CA045B0001000800020000000000000001000003A9FECC00C8070AFAC6FE2206CA00010000000000000000000000000000001502F8000A017F00000384002701B40021035F0040022F0020027E0026020F0020013F002F013F002F027E002D027E002501D9002501BF0015027E002D025E0016013F002F023F0073023F00D2023F00730000FE34000000A400A40124016201B4025602D2033E034A038E040C048E0506056805DC068806C806D206FA0728073200010000001500A50008009B000800020001000000140000010002D100030004B801FF85B0018D004BB0085058B101018E59B146062B5821B010594BB014525821B080591DB0062B5C5800B0062045B0032B44B00B2045BA0006021400022BB0032B44B00A2045B20B49022BB0032B44B0092045B20A34022BB0032B44B0082045B209B5022BB0032B44B0072045B20820022BB0032B4401B00C2045B0032B44B00E2045B20C6E022BB10346762B44B00D2045B20E0E022BB10346762B44B00F2045BA000C7FFF00022BB10346762B44B0102045B20F2F022BB10346762B44B0112045B2101D022BB10346762B44B0122045B21114022BB10346762B44590000
00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/space 1 def
/H 2 def
/I 3 def
/O 4 def
/a 5 def
/d 6 def
/e 7 def
/i 8 def
/l 9 def
/n 10 def
/p 11 def
/r 12 def
/t 13 def
/u 14 def
/y 15 def
/dotlessi 16 def
/grave.cap 17 def
/dotaccent.cap 18 def
/grave.uc 19 def
/uni0300.cap 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1338 -401 1738 1115}def
/UniqueID 4025032 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55432D4F3B2AF89AB3F665ECA680A77DC68550F721A1AC91638CE0630B3BF0E1E8E483C58480D639936DF84C2D7B3842CD20473EFF8DD97366771E579149EE58CC143A5B329EBA7102AC34DE14A0587D9F946108547E09622B0592D85011C4D7CC55037CD6068FB9AB8DEA40B85B7729C26A6636828F3C66A70BDE5126661C417E7559D8F55046A46C763FE5CFBAA95A9827539E66603B4334D8916A562EF841C03E18C81DBBDDD0FA6C9D30091D0B80C15350C4BD429B166FCEC32231AA563B6B15E79B9693410929F79BF38C74234759FB26E192DAE0DDBC99F22A2D1383D116736BDB65E306274DE38F530DBF0A3E14BDCE2311506967620B7000F633D0934CC9BF263F9FE9F848CECB6DF27DEC8AD1EBD0588DE8C76484959CEEE9A21922BA7C3025955F5FC42C108EAD7AD81EA2EA898194906C1EFA81790E3F834F396822052B38D1058BD7201D3F178B559A8A5FD40DD0E456107A5885E7C268AA58386CB9BD297F4C0C46F4F2ED406611FB2D5FBFEB2EF76E616B4D27BD5DC25ED9B0892D8C0B9B30C8D38EB716ED763BB3633A83C87CFC9B1846E8F045BCD6EC3A2B17CCA02BEF24E8BFC5C3C9BDA7C3637F1A7215633ADBEC3377E4AD6C323B258F03B209AF0B85800C5277309B6BB36DA9FFD7236492E82050C0312FEEE4A40A5341BF6F4588E3FEAB46C974F91EC8994C2D36725898B9CF58AC6F51079A62FCEA0A732F1141752F019453E382DA7B1042953208A0E06836686FD7E08CCA0278BF5894783FC79BA44684649D1E49F23A8FEA2D91D730FD8EFA52817A88C6476099A85D0D5
D12681FA056307B5BFFE7214C8AE0D7CF6EB49474F8E4F4A6D26741F90C9B190E68A96601851B2F404B1DC552638F8AD4835A742EEDBF820CA6C5E6EF8821FFADD3932C425D6FA57DB1858AA840B4E1E68FFE194FCB77578F4EFE20F8ED1AE37F16341FC8974632AFEF8941B6358A3B36CCC8C0442139104526A38455484BF52EBF0A8F6F4CE10033AECF5AB79C0F0F74E06D7E08672585A5183231F7955592F2E5A6A56221F0A169F54E3B90EBDA03797B218AA8CB2E1414B5330546DC71B2300C93932FE1F4528F4BCD44A0C515C382EA3C86647A3F188D789179D62604331B47F1114E1C6609D0C970E2E1865C84913AF8246AC30786426029FB8DCB4FAF929AF5D26783F12AE000A41AF0F3A0F878596AE40581DC577D5768B468A4007C6F9063321E3BF06375341CD9FDDBE849DA119582CB8F5EA591EFE8D48CB37077A21E5FE886CB1BD283AB2CF747F86F12CC225185B13D1637BD3EB7666BABCB35B41C7480E3994022FC1C8B1062E0BBDE5A5C7E70954DBC068DA39C40D5EF3723C7034D66568D230679BEBAEE54A91015967D8DF8E382BD1A2160F96BF3D62313316B6419D8EB47D31C342748BAAF27782C6E5603B3F908490DD4B78CFA6C9679CC140E12C09D201982655345FFE704E9A02015E6406EE87877A36913AFD1A35691E171F28370992CA199AA4CFE57CBB94AA18689F1C5123A695C831624F5B69AB53FCD53BFD56CC10E04374FA8DF8BAA3511F98B97572FD673852A33E1CA6D486BBBC1DDECFF13946A37B45087E84D737FFCA34FFB5A12C64761745933B8B2CABB6E4B078DDAA0355E71D404493482E4FDA9DB828F5CE82CCD632A09FA1E0DB5852F93535659D3DE6B3DBCE232D7B64878DD489E2941FC5D54DEAAAA6CE90A67669C47D0593EE5236B59A7599FF308FA83FB4344F8B4CF4A3770CB35F6EFC2C0CA1062B616A83554759CB814870D5E2E34DF9EDA9EC8C26E5CE770C67ECF65D11F6CF9EACBC96EC87616EEA39055996A734E6EB8D386C31C295930BB8E22E5FD7DF674E934F06E836A334E9D1ED5389FDCE5AAA9A495AA0096F203D59608B8B6DDDB53EFDFB2910912A3FA90E1C82188D846502A9A83EFC11E9EE63B523A7B9AEC4FEC34C80FC08528955C80F08841C897BBDCA63016D6A7AD7252C663E1AAC512E1197B55C0B31B2ED8468E398E70EEDD445A022BF48ABB14AAC1D7D84C5BC51784D681473D93B18FD69E2C5EB490E308A69E7FAEC885064FF3A81B37271037DF2182C88A56B0A678813819E85D9F50BCA52A8EE3DC6782CB44D254D1942E991F1048C8F71FB0B07E235AF7C1BDD745F42178A40FD7BBF7BB47C27B464BFB2CAEF5524716A22FC7157C53E7032ABAF98BA869AAD40D3A78A74212ED6B29C9565DDE13C1739E1D0D6F69EB0A73B16502A1F0A72A0E30CB885EFBF63673CB70A29
FEB01C529FD9497EB3C589C5D49280DAC416839D6025909F59283BFE05EA275D9892A1CA7247B6D7AE818D60199422B0609EDE0A6500BD1654F5D0CBFAABCCE21471300F44304A6AB7CCBA54E030B786459CED23BB34BE0830696296C52C7192630430D52D6251A754767509B10F77BC696C962903BB4C799C000BA2ECA155430EB52959716DEB3D04BF8BCD56762A412FA20411EDABDD15D030CDB610A93C13936281F347488A259A29738AF84B5804239A92FDC160E40D6BB7761440C2FA558F78E00E5B42D5000437083151AEBE8777E78B39A8652CC6B027D2B05AAD14491632FA1A2ED1A8A871E966EC5803FAAD327B34BE469AB66997A24ECDB10C7BADC8A683C8F2DB4E663580B5E30C80BD7B5B073CC040D7205ADE1EA518AE21A0D18F7048E857C6F80EB7A3CE7D5C4208DF46A74D3481781D2E3B29CF1C670D1AEE83C4894EA0F4B6A9C73A0733961B0C98881374FD8B70C5D7547AE375B433E03E6E0836F28CF76AD1EFC07396BA7103CCBC21735D9151B72387C9EA338117932B72FE28EDAB86E10296A6B627A91498DDCC3FEE454D9134F948B5AA0A920CD6C8B326FD7E92F569F933AA32E7E3A1DFEF9D17E169B3E45D0B036356C6C3BF3D74A3F0C7168742EE5A16E8F992C2116C2FA558A97F5B8C4CFDDFEA9CCA8A82F6FA9BED048BEC65B658556E28032DC0EF6F1AAA81CE43FFA62B070AA607405187DB2A071F1FBFCE9EAC2276C8B6C673D34B7EDDC664641482C2ECA84CFA7CB464FCA9D405527BE8CCC69A2E0915C82236DFDA7213C07F1B530F36BF5F8FF090088A519AF2CEA7D195498CC78C0C4C403F11C54774CF147AD30C54CA75BA49E66DD18E6D09EA6C98DE2D73B72C56B4BEAEE942C6486D42E983F9D32DEE4C13A9DFF3F27E4F103281DA9635329F1D4912D60A50C7639C28ADCB94D79C4A502E029E6E533D19B43BBA79D9594FE97FBB36AB0AA04E6D332BD4C021DC700D4DE31AD85952A217EDCFB3093CCAD5FB5B2E63C0F56D14AAE6D2FA083DB25829395F6D261196EA972A1826210A889CBD4850B8773D6190508130172A303C60C464F09C98B93D57B8F33DFD7852CFDC859979F37E4E364AE4C276142B91A3D7A3F393493540C170B2248E2D52DC152B2CB9ABBE46610D158AEDAECF2425BD4A6C360D7DE63EA9356885AC402D0774BC816DD9522D2382BB5F3836BF997668279F150B6E31520A3D0CB0D6EB5C78FAE59F33B6EC0FD3DB8D5E4E27FD4BE912E08DCE86526E158153353D4486BC2E16D445AAEFCCB4F186790E33C8F9741A8589DA73C832FD443861B814088C81466459F3D7AAB723353930B0050656A69A05BC080F4E79BE529E36D5583B3ACC521AA64387F01E3280F62B0C41274D469D75C6184FDB8C1ACD596F2858E1674FC4EC82F1CB44C9EAEF0B1CAC8FDDE79CE355810E0671C434D9
460A3C687768E19D36FC91A85D060E0A2E9CEFC29A7F475F7F2D033D77FAB189473A69BBF8B7F1D0B94E9569577FDE2E8CE395DD08E488F9D862EC61C4E188425AA6D497ACF69D5C760FE236F7FBDE2BA517136D1FA16694ABE44C985DF992ACA02D2B39BAE24FBA39BAACA81C39720E97B130EA3D093C1988420C4F033D37F5C33B6DC5684E53BF071B07FD4F6E23677E2198DB23C0684649E7362757E62B6206D2F4754E31C5201041616D902AAE288105A479DD54EFC5AF7476EFF3BCF6231FE6B8B11F13A25EA85D31C11AC21036D055A29DC552B86952E022A9E7D2750822FEB96A9872D82FD04D1CE333D10D13EDB2A70C6C41CF5B2EF32E6576E4EE54C12DC6041D92BFBFA97FF63D08BB4BC16DA9CA54EE8689423455DC03F880FA291FF2EC756B2A7DA0105A3F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Bold cguidfix
/F1.1/CMUSerif-Bold renmfont
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /i put
dup 34 /one put
dup 35 /two put
dup 36 /three put
dup 37 /h put
dup 38 /four put
dup 39 /o put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<




00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/one 1 def
/two 2 def
/three 3 def
/four 4 def
/h 5 def
/i 6 def
/o 7 def
/grave.cap 8 def
/grave.uc 9 def
/uni0300.cap 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec


8E2E5D4D97F4979F8FD9A02453928A79F017BD2B1D52198ECFE61E26414528C5781C1E063DC75E79EF79E17B9445C302AE6C3A558A2A6C823C8CE01B96F28A5751E23FD6B7F71A148AB9156028AEFE034279EE5806E4D50E2A48C383E5506B1112BE3A161748CEBEF8A429B72857CD7504730EB6802E0DFE0A9F8FDBCB16F0E92991BD1D940CFE886EF36BE3B6A1F4287060EB7B7C73A0C483003238D1281EAEAD82107F4C9ED579AFA73731AB6223435FA89130629AB9599799D1603B943FAC25512387CBB64AE99AA0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F2.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 435 414 rc
-1258 1435 m
1853 1435 l
1853 -1382 l
-1258 -1382 l
h
-1258 1435 m
f
73.298965 303.29898 m
84.233696 292.36429 84.233696 274.63571 73.298965 263.70102 c
62.364296 252.7663 44.635704 252.7663 33.701031 263.70102 c
22.766304 274.63571 22.766304 292.36429 33.701031 303.29898 c
44.635704 314.2337 62.364296 314.2337 73.298965 303.29898 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
294.29898 192.70103 m
305.2337 203.6357 305.2337 221.3643 294.29898 232.29897 c
283.36429 243.2337 265.63571 243.2337 254.70103 232.29897 c
243.7663 221.3643 243.7663 203.6357 254.70103 192.70103 c
265.63571 181.7663 283.36429 181.7663 294.29898 192.70103 c
S
0 i
1 1 1 sc
CM
73.298965 201.29897 m
84.233696 190.3643 84.233696 172.6357 73.298965 161.70103 c
62.364296 150.7663 44.635704 150.7663 33.701031 161.70103 c
22.766304 172.6357 22.766304 190.3643 33.701031 201.29897 c
44.635704 212.2337 62.364296 212.2337 73.298965 201.29897 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
294.29898 294.70102 m
305.2337 305.63571 305.2337 323.36429 294.29898 334.29898 c
283.36429 345.2337 265.63571 345.2337 254.70103 334.29898 c
243.7663 323.36429 243.7663 305.63571 254.70103 294.70102 c
265.63571 283.7663 283.36429 283.7663 294.29898 294.70102 c
S
0 i
1 1 1 sc
CM
73.298965 99.298965 m
84.233696 88.364296 84.233696 70.635704 73.298965 59.701031 c
62.364296 48.766304 44.635704 48.766304 33.701031 59.701031 c
22.766304 70.635704 22.766304 88.364296 33.701031 99.298965 c
44.635704 110.2337 62.364296 110.2337 73.298965 99.298965 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
294.29898 396.70102 m
305.2337 407.63571 305.2337 425.36429 294.29898 436.29898 c
283.36429 447.2337 265.63571 447.2337 254.70103 436.29898 c
243.7663 425.36429 243.7663 407.63571 254.70103 396.70102 c
265.63571 385.7663 283.36429 385.7663 294.29898 396.70102 c
S
0 i
1 1 1 sc
CM
237.29897 252.29897 m
248.2337 241.3643 248.2337 223.6357 237.29897 212.70103 c
226.3643 201.7663 208.6357 201.7663 197.70103 212.70103 c
186.7663 223.6357 186.7663 241.3643 197.70103 252.29897 c
208.6357 263.2337 226.3643 263.2337 237.29897 252.29897 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
458.29898 243.70103 m
469.2337 254.6357 469.2337 272.36429 458.29898 283.29898 c
447.36429 294.2337 429.63571 294.2337 418.70102 283.29898 c
407.7663 272.36429 407.7663 254.6357 418.70102 243.70103 c
429.63571 232.7663 447.36429 232.7663 458.29898 243.70103 c
S
0 i
1 1 1 sc
CM
237.29897 150.29897 m
248.2337 139.3643 248.2337 121.6357 237.29897 110.70103 c
226.3643 99.766304 208.6357 99.766304 197.70103 110.70103 c
186.7663 121.6357 186.7663 139.3643 197.70103 150.29897 c
208.6357 161.2337 226.3643 161.2337 237.29897 150.29897 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
458.29898 345.70102 m
469.2337 356.63571 469.2337 374.36429 458.29898 385.29898 c
447.36429 396.2337 429.63571 396.2337 418.70102 385.29898 c
407.7663 374.36429 407.7663 356.63571 418.70102 345.70102 c
429.63571 334.7663 447.36429 334.7663 458.29898 345.70102 c
S
0 i
1 1 1 sc
CM
237.29897 48.298969 m
248.2337 37.364296 248.2337 19.635704 237.29897 8.7010317 c
226.3643 -2.233696 208.6357 -2.233696 197.70103 8.7010317 c
186.7663 19.635704 186.7663 37.364296 197.70103 48.298969 c
208.6357 59.233696 226.3643 59.233696 237.29897 48.298969 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
458.29898 447.70102 m
469.2337 458.63571 469.2337 476.36429 458.29898 487.29898 c
447.36429 498.2337 429.63571 498.2337 418.70102 487.29898 c
407.7663 476.36429 407.7663 458.63571 418.70102 447.70102 c
429.63571 436.7663 447.36429 436.7663 458.29898 447.70102 c
S
0 i
1 1 1 sc
CM
237.29897 354.29898 m
248.2337 343.36429 248.2337 325.63571 237.29897 314.70102 c
226.3643 303.7663 208.6357 303.7663 197.70103 314.70102 c
186.7663 325.63571 186.7663 343.36429 197.70103 354.29898 c
208.6357 365.2337 226.3643 365.2337 237.29897 354.29898 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
458.29898 141.70103 m
469.2337 152.6357 469.2337 170.3643 458.29898 181.29897 c
447.36429 192.2337 429.63571 192.2337 418.70102 181.29897 c
407.7663 170.3643 407.7663 152.6357 418.70102 141.70103 c
429.63571 130.7663 447.36429 130.7663 458.29898 141.70103 c
S
0 i
1 1 1 sc
CM
401.29898 252.29897 m
412.2337 241.3643 412.2337 223.6357 401.29898 212.70103 c
390.36429 201.7663 372.63571 201.7663 361.70102 212.70103 c
350.7663 223.6357 350.7663 241.3643 361.70102 252.29897 c
372.63571 263.2337 390.36429 263.2337 401.29898 252.29897 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
622.29895 243.70103 m
633.2337 254.6357 633.2337 272.36429 622.29895 283.29898 c
611.36432 294.2337 593.63568 294.2337 582.70105 283.29898 c
571.7663 272.36429 571.7663 254.6357 582.70105 243.70103 c
593.63568 232.7663 611.36432 232.7663 622.29895 243.70103 c
S
0 i
1 1 1 sc
CM
401.29898 150.29897 m
412.2337 139.3643 412.2337 121.6357 401.29898 110.70103 c
390.36429 99.766304 372.63571 99.766304 361.70102 110.70103 c
350.7663 121.6357 350.7663 139.3643 361.70102 150.29897 c
372.63571 161.2337 390.36429 161.2337 401.29898 150.29897 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -221 496 cm
622.29895 345.70102 m
633.2337 356.63571 633.2337 374.36429 622.29895 385.29898 c
611.36432 396.2337 593.63568 396.2337 582.70105 385.29898 c
571.7663 374.36429 571.7663 356.63571 582.70105 345.70102 c
593.63568 334.7663 611.36432 334.7663 622.29895 345.70102 c
S
301.71988 204.03528 m
401.82669 172.90451 l
S
0 i
CM
188.46582 325.47107 m
179.93584 325.96017 l
181.71753 320.2308 l
h
188.46582 325.47107 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46582 170.52892 m
400.93582 170.03983 l
402.71753 175.7692 l
h
409.46582 170.52892 m
S
1 J
1 j
0.60000002 i
301.71988 220.96472 m
401.82669 252.09549 l
S
0 i
CM
188.46582 241.52892 m
181.71753 246.7692 l
179.93584 241.03983 l
h
188.46582 241.52892 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46582 254.47108 m
402.71753 249.2308 l
400.93582 254.96017 l
h
409.46582 254.47108 m
S
1 J
1 j
0.60000002 i
295.33951 231.94174 m
410.42157 339.30487 l
S
0 i
CM
195.27119 151.23784 m
191.46805 158.88873 l
187.37509 154.50151 l
h
195.27119 151.23784 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
416.27121 344.76215 m
412.46805 337.11127 l
408.37509 341.4985 l
h
416.27121 344.76215 m
S
1 J
1 j
0.60000002 i
289.91949 236.47545 m
417.72534 435.19797 l
S
0 i
CM
201.05273 54.073475 m
199.24855 62.424816 l
194.20212 59.179272 l
h
201.05273 54.073475 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
422.05273 441.92651 m
420.24854 433.5752 l
415.20212 436.82074 l
h
422.05273 441.92651 m
S
1 J
1 j
0.60000002 i
295.33951 295.05826 m
410.42157 187.69511 l
S
0 i
CM
195.27119 313.76215 m
187.37509 310.4985 l
191.46805 306.11127 l
h
195.27119 313.76215 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
416.27121 182.23784 m
408.37509 185.50151 l
412.46805 189.88873 l
h
416.27121 182.23784 m
S
1 J
1 j
0.60000002 i
301.71988 306.03528 m
401.82669 274.90451 l
S
0 i
CM
188.46582 223.47108 m
179.93584 223.96017 l
181.71753 218.2308 l
h
188.46582 223.47108 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46582 272.52893 m
400.93582 272.03983 l
402.71753 277.7692 l
h
409.46582 272.52893 m
S
1 J
1 j
0.60000002 i
301.71988 322.96472 m
401.82669 354.09549 l
S
0 i
CM
188.46582 139.52892 m
181.71753 144.7692 l
179.93584 139.03983 l
h
188.46582 139.52892 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46582 356.47107 m
402.71753 351.2308 l
400.93582 356.96017 l
h
409.46582 356.47107 m
S
1 J
1 j
0.60000002 i
295.33951 333.94174 m
410.42157 441.30487 l
S
0 i
CM
195.27119 49.237843 m
191.46805 56.888729 l
187.37509 52.501507 l
h
195.27119 49.237843 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
416.27121 446.76215 m
412.46805 439.11127 l
408.37509 443.4985 l
h
416.27121 446.76215 m
S
1 J
1 j
0.60000002 i
289.91949 392.52457 m
417.72534 193.80205 l
S
0 i
CM
201.05275 308.92651 m
194.20213 303.82071 l
199.24857 300.57516 l
h
201.05275 308.92651 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
422.05273 187.07349 m
415.20215 192.17928 l
420.24857 195.42482 l
h
422.05273 187.07349 m
S
1 J
1 j
0.60000002 i
295.33951 397.05826 m
410.42157 289.69513 l
S
0 i
CM
195.27119 211.76216 m
187.37509 208.49849 l
191.46805 204.11127 l
h
195.27119 211.76216 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
416.27121 284.23785 m
408.37509 287.5015 l
412.46805 291.88873 l
h
416.27121 284.23785 m
S
1 J
1 j
0.60000002 i
301.71991 408.03543 m
401.82687 376.90518 l
S
0 i
CM
188.46605 121.47038 m
179.93605 121.95951 l
181.71771 116.23014 l
h
188.46605 121.47038 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46603 374.52963 m
400.93607 374.0405 l
402.71771 379.76987 l
h
409.46603 374.52963 m
S
1 J
1 j
0.60000002 i
301.71988 424.96472 m
401.82669 456.09549 l
S
0 i
CM
188.46584 37.528923 m
181.71753 42.769192 l
179.93584 37.039829 l
h
188.46584 37.528923 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
409.46582 458.47107 m
402.71753 453.2308 l
400.93582 458.96017 l
h
409.46582 458.47107 m
S
1 J
1 j
0.60000002 i
462.70636 176.55516 m
569.88696 243.21629 l
S
0 i
CM
355.68024 248.55862 m
350.47137 255.33119 l
347.30255 250.23624 l
h
355.68024 248.55862 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
576.68024 247.44138 m
571.47137 240.66881 l
568.30255 245.76376 l
h
576.68024 247.44138 m
S
1 J
1 j
0.60000002 i
456.35834 183.71404 m
578.43872 335.57016 l
S
0 i
CM
362.4512 154.19485 m
359.77689 162.30952 l
355.10062 158.55019 l
h
362.4512 154.19485 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
583.45117 341.80515 m
580.77686 333.69049 l
576.10065 337.44983 l
h
583.45117 341.80515 m
S
1 J
1 j
0.60000002 i
467 263.5 m
564.09998 263.49994 l
S
0 i
CM
351.09998 232.50005 m
343.09998 235.50005 l
343.09998 229.50005 l
h
351.09998 232.50005 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
572.09998 263.49994 m
564.09998 260.49994 l
564.09998 266.49994 l
h
572.09998 263.49994 m
S
1 J
1 j
0.60000002 i
462.70636 278.55518 m
569.88696 345.21628 l
S
0 i
CM
355.68024 146.55862 m
350.47137 153.33119 l
347.30255 148.23624 l
h
355.68024 146.55862 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
576.68024 349.44138 m
571.47137 342.66879 l
568.30255 347.76376 l
h
576.68024 349.44138 m
S
1 J
1 j
0.60000002 i
462.70636 350.44482 m
569.88696 283.78372 l
S
0 i
CM
355.68024 216.44138 m
347.30255 214.76376 l
350.47137 209.66881 l
h
355.68024 216.44138 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
576.68024 279.55862 m
568.30255 281.23624 l
571.47137 286.33121 l
h
576.68024 279.55862 m
S
1 J
1 j
0.60000002 i
467 365.50018 m
564.09998 365.50082 l
S
0 i
CM
351.09998 130.49913 m
343.10001 133.49918 l
343.09998 127.49918 l
h
351.09998 130.49913 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
572.09998 365.50089 m
564.09998 362.50082 l
564.09998 368.50082 l
h
572.09998 365.50089 m
S
1 J
1 j
0.60000002 i
456.35834 445.28598 m
578.43872 293.42984 l
S
0 i
CM
362.4512 208.80516 m
355.10062 204.44981 l
359.77689 200.69048 l
h
362.4512 208.80516 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
583.45123 287.19485 m
576.10065 291.55017 l
580.77686 295.30951 l
h
583.45123 287.19485 m
S
1 J
1 j
0.60000002 i
462.70636 452.44482 m
569.88696 385.78372 l
S
0 i
CM
355.68024 114.44136 m
347.30255 112.76376 l
350.47137 107.66879 l
h
355.68024 114.44136 m
f
0 J
0 j
1 0 0 -1 -221 496 cm
576.68024 381.55862 m
568.30255 383.23624 l
571.47137 388.33121 l
h
576.68024 381.55862 m
S
/Cs2 SC
0 sc
1 0 0 -1 50 396.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-44.799999 3.4000244 m
(!"#$%&'\(\)*+)[ 6.976000 10.208000 10.208000 10.208000 7.152000 6.128000 5.104000 8.432000 9.184000 8.432000 0.000000 ] xS
1 0 0 -1 214 396.5 cm
-51.703999 3.4000244 m
(,-..*"&'\(\)*+)[ 14.400000 5.104000 10.208000 10.208000 8.432000 10.208000 6.128000 5.104000 8.432000 9.184000 8.432000 0.000000 ] xS
1 0 0 -1 378 396.5 cm
-51.792 3.4000244 m
(/$%#$%&'\(\)*+)[ 13.808000 10.208000 7.152000 10.208000 10.208000 7.152000 6.128000 5.104000 8.432000 9.184000 8.432000 0.000000 ] xS
1 0 0 -1 55.5 283.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-4.4660001 3.6000137 m
(!)s
/F2.1[ 9 0 0 -9 0 0]sf
-0.034000002 7.6000137 m
(")s
1 0 0 -1 55.5 181.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-4.4660001 3.6000137 m
(!)s
/F2.1[ 9 0 0 -9 0 0]sf
-0.034000002 7.6000137 m
(#)s
1 0 0 -1 55.5 79.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-4.4660001 3.6000137 m
(!)s
/F2.1[ 9 0 0 -9 0 0]sf
-0.034000002 7.6000137 m
($)s
1 0 0 -1 219.5 334.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.6900001 3.6000137 m
(%)s
/F2.1[ 9 0 0 -9 0 0]sf
2.1900001 7.6000137 m
(")s
1 0 0 -1 219.5 232.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.6900001 3.6000137 m
(%)s
/F2.1[ 9 0 0 -9 0 0]sf
2.1900001 7.6000137 m
(#)s
1 0 0 -1 219.5 130.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.6900001 3.6000137 m
(%)s
/F2.1[ 9 0 0 -9 0 0]sf
2.1900001 7.6000137 m
($)s
1 0 0 -1 219.5 28.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.6900001 3.6000137 m
(%)s
/F2.1[ 9 0 0 -9 0 0]sf
2.1900001 7.6000137 m
(&)s
1 0 0 -1 382.5 232.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.25 3.6000137 m
(')s
/F2.1[ 9 0 0 -9 0 0]sf
1.75 7.6000137 m
(")s
1 0 0 -1 382.5 130.5 cm
/F2.1[ 16 0 0 -16 0 0]sf
-6.25 3.6000137 m
(')s
/F2.1[ 9 0 0 -9 0 0]sf
1.75 7.6000137 m
(#)s
ep
end
%%Trailer
%%EOF
