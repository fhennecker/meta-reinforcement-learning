%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 449.000000 287.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 449 287
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 449 287
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
dup 34 /t put
dup 35 /a put
dup 36 /hyphen put
dup 37 /one put
dup 38 /r put
dup 39 /A put
dup 40 /g put
dup 41 /e put
dup 42 /n put
dup 43 /E put
dup 44 /v put
dup 45 /i put
dup 46 /o put
dup 47 /m put
dup 48 /plus put
dup 49 /h put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<



2D3B223037572C1B10572C1B104F20380C1C3D2F2427403B57242F20110F0F100D150601272676571F141B19270301020D0D244E39484936293F3E2A1E260F03023201547B281B397B281B00000100200000021702B60030009A00B20002002BB01933B10106E9B2181E2C323232B20A05002BB408060030042BB20F03002BB12508E901B0312FB004D6B1290AE9B00A32B229040A2BB340292C092BB204290A2BB3400401092BB00832B02910B20421102BB1150AE9B215210A2BB3401518092BB221150A2BB340211E092BB032D6B129041112B10C2F3939B02111B00F39B01512B01B3900B125011112B20B0C143939393031333532363511342623353711333E013332171E011D011E013315262322073532363D0134262322061D01141633152623222035191A3490011048384B1E160901202D660A086935191F2B34531935660A081F0D20020825131F0BFEA4243C25193848BF15091F03031F0D20E9333C5749B8200D1F0300000000020021000000F7029D0012001C006500B20002002BB10106E9B00E32B20A03002BB20903002BB10806E9B01A2FB416060013042B01B01D2FB004D6B10B0AE9B01732B20B040A2BB3400B0E092BB2040B0A2BB3400401092BB00B10B11313E9B0132FB01ED6B10B041112B211161A393939003031333532363511342623353711141633152623220334363216140623222621351919318C153166020E361F2C1F1F16171E1F0D20010D25121F0BFE911E0E1F03026514211E2E1E20000100200000032D01BA004700DD00B20002002BB11C303333B10106E9B41B212F3543241732B20D03002BB10A123333B13C08E9B02832B20D03002BB408060030042B01B0482FB004D6B1400AE9B40B0A004F042BB20B040A2BB3400B43092BB2040B0A2BB3400401092BB00832B04010B20438102BB12C0AE9B22C380A2BB3402C2F092BB2382C0A2BB3403835092BB02C10B540382C24000F2BB1180AE9B218240A2BB340181B092BB224180A2BB3402421092BB049D6B10B041112B04639B138401112B00D39B02C11B10F323939B02412B01239B01811B01E3900B108011112B20B0F173939393031333532363511342623353715363332173E013332171E011D011E013315262322073532363D0134262322061D0114163315262322073532363D0134262322061D01141633152623222035191A348D2F6575101148384B1E160901202D660A086935191F2B34531935660A086935191F2B34531935660A081F0D20010C25131F0B696962263C25193848BF15091F03031F0D20E9333C5749B8200D1F03031F0D20E9333C5749B8200D1F03000000000100200000021701BA002E009F00B20002002BB01733B10106E9B2161C2A323232B20D03002BB00A33B12308E9B20D03002BB408060030042B01B02F2FB004

1E2A0D0783080D090705900A1901901F03031F1A040DFEE900FF11071119011F03031F1B1711FEBB13070C0163190C000001000C0000020401AF003D00DF00B20002002BB02833B10106E9B2272D39323232B21E03002BB00A33B11F06E9B2090F1932323201B03E2FB03FD6B0361AB103158704B0032EB015C0B13309F9B021C0B106328705B0062EB032C0B1131DF9B024C0B00610B3050632132BB1063208B00310B3050315132B05B01310B3141324132BB1132408B00310B3140315132B05B01310B3231324132BB1132408B03310B3233321132BB1332108B00610B3330632132B00400B03050613141521232432332E2E2E2E2E2E2E2E2E2E2E01400B03050613141521232432332E2E2E2E2E2E2E2E2E2E2EB0401A01003031333532373037272E01233516333237150615141F01373635342735163332371506070607171E01331526232207353E0135342F01060706151417152623220C4E325E63231F3429361E4E23094E3E0F1D27392B274C2B13498610242B2D33125A1212154C4C0A041D48172C1F3C77812D101F03031F0217080A654E12111C031F03031F0232155CAD150A1F03031F011008041D645A1509071B041F03000000FFFF005F02E60129035E10070013000000FD00000001005F01E901290261000D002700B0072FB10608E9B0032F01B00E2FB000D6B40613000A042BB00FD600B103061112B009393031133436333216170726272E035F130F0A217D0B078E0C071106023C0D18134E17022C0402090D00FFFFFE6B02E6FF35035E10070012FE0C00000000000100000000B333D9B910DD5F0F3CF5001F03E800000000C65FA56100000000C65FA561FB91FE7D05D704460000000800020000000000000001000003A7FF0600C805FFFB91FE6105D700010000000000000000000000000000001502F8000A030A0039014D000A01F4005902EE002002A8002101F4002A01BC001C01F4001C022B00200115002103410020022B002001F4001C0187001C01840013020F0013020F000C01F4005F01F4005F0000FE6B000000A600F80118016C020402A2034C03BE04A605360594066006EE073E07C408260898095E0968099609A0000100000015009E0008009C0008000200010000001400000100031300040004B801FF85B0018D004BB0085058B101018E59B146062B5821B010594BB014525821B080591DB0062B5C5800B0062045B0032B44B0092045B20671022BB0032B44B0082045B20951022BB0032B44B0072045B20831022BB0032B4401B00A2045B0032B44B00E2045B20A16022BB10346762B44B00D2045B20E5E022BB10346762B44B00C2045B20D45022BB10346762B44B00B2045BA000C011500022BB10346762B44B00F2045BA000A7FFF00022BB10346762B44B0102045B20F6B022BB10346762B44B0
112045B21030022BB10346762B44B0122045B21122022BB10346762B44B0132045B21214022BB10346762B4459000000
00>] def
/CharStrings 21 dict dup begin
/.notdef 0 def
/plus 1 def
/hyphen 2 def
/one 3 def
/A 4 def
/E 5 def
/a 6 def
/e 7 def
/g 8 def
/h 9 def
/i 10 def
/m 11 def
/n 12 def
/o 13 def
/r 14 def
/t 15 def
/v 16 def
/x 17 def
/grave.cap 18 def
/grave.uc 19 def
/uni0300.cap 20 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec


92E811C9ED6EB9BF9ABBB295E976375FB09C619CBC03D795AF0F0E62081EC9410ADB14459D86CBB5E06DB3704B1AFFDDA55C5CD697DB3D3CBA05F2BDD639882FA6E9AA546D39202252758FEE8531BE9CE3DC0684C5E1004016D9C62649825392A06A6C631CF9D9DDFC89D78F105F8433B1668B4AA5E4C07EBD7F784C2FC02033A81B537ACDDD64A1E3C3B01C4AA7E2F216B746431FFC27F3B989277F68AF562FB7FC52DCE7876F6EF11DB8035A85A377A6297EEC2F4C4FB5D09D7E2A3CDEB26B07F8E6C4BD6A09F6845C933B68EAF5C763611252E0E04AE2AB8171137C88A977257073943671B4B02780D8CEF4A2D701AF96C24A420F4555509C67439EF7772B3B1F70A451E30E69BEC867CF43B2782D93A59CA450CD58F300352DB70EFF6125E9087EC9C0623FAAC162E607D4ABDA67311A3D6862886E82032A42E718DA64AF43095A0B8A05C6683ADBD936F2BEFC835A2AFE0FDAA122D0CBBC11DF16D6E0C02CC58F8B349770DD2434AFBA2B1E061EB67E4860374484E3749353FC437DE1EF3C1A7133665B02E48D43BE839F5FABFC984440092769A1078A8947BDFD18F8A99E83A02116249053795B04A43E5D51C557259EA30E19611A1D3D778DD60BB029B3453F16278E1C6856780CC6F6B1AC9B9BC44B280763AC63E579FE569962566224783A0AE76D2EF6D9A98A6453AE8FB990237B7C64C66F5ABD94D5401C883B88849FBBA343E023162718141D9A3EDF8790467C7C5F1191A24C9DC5B2AA5622C6AB28A912F587FBD86E93D48A0845C5A3A918C3B4EE220FBECC579831727409AF3DBE241ADB0A16C0D58BA5F80760D6D813DEDDD68D4970C44857329A51FF7DD7CCCCDC7B81F28BF2CC4DDAA923C4C82241A50529428074FB7694A3C5118BB44E9CE62055071637B5F564F66487E553F83CBB9865E4DF9E7D567D00E853E9169F7DE1554012396F3A97664E928ED8DA31D242E271E2D6DA33078F45E554342214E09406E17F5C766A5AAD81B7D04DDCFC087363F8FCD258BCCC9A3E3BA8DFEA010CDBA8050E4CE44D5496118FD49374D9E0580642B7EA8BB01BD0C29A35B158C48C4897D4EF5BA93539FD1358E93A2E8925B3D2FE91E7BD1DC96577B4134FEA52CF69487EE2F69277EDA3551F8B2C00B518E36CE4CDFBB277E19B57C32C2A4F19B03BEE743C5F08BA8C38B968C373C96857542E3308F154DC6FAEE3FCF805C490C69D371266CDCC956FD8A190CBC764686F6F9B43A8B7AF8494229DEBF46E8B1024ED97BAEB3063CEF9A83CDB31521250850ACC646FD22F43F63D3D1AA4FECE5977DD8D8EA5E6F7089B32104D0A877A119DF46A61057BDCB1B3FD465FF633AB89D04B0C2D014B48AEA1CAC01A86758C854E38E7C2F2DF4C820C631A56FD96C4C35B6052894C3187AB43DB36720D4905477D418851A015D8E91C416410768AAD99

548317A8D6459D40C275E158B3E2C5C4ABEF5FCF2F3C022808B11C09BF12AE65EDA6C143593FF169A8DF29335C54B61A8FADD98D23F1141700086A6D75D021B91A4D8F93A77B4B6750415549E0EC229810AD8F1293105D505C552869B1508DB355FAB91C7CDDD625A8F7D39427A257489E695E47FB1C8D0F224B8734970B1C7D1F4D6AC45A0227FD6D2952144F5F9AD165031837B1AC829C621C89FE5A9600C16AEF8BCA08EC7986B21A0626855958EFF90C07678C613634A6A24CFFC3FF46376A251F88D53B1B8D2278EAC59E8E8CF316FD5A99E8B70CDDCB04EC1036721D414BC0771825F8B3ECF7DBEA26BAF525544AF45767C5D21EF72AC9E5021EB1BF237075E162433C2B45B80E31932EE18F1D5FE37D475AF1FD54F895867D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 449 287 rc
-2079.0549 1592.4835 m
2416.5493 1592.4835 l
2416.5493 -1655.868 l
-2079.0549 -1655.868 l
h
-2079.0549 1592.4835 m
f
1 192 m
40 192 l
40 97 l
1 97 l
h
1 192 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 284 m
574 284 l
574 379 l
535 379 l
h
535 284 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 144.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.5440001 2.3000183 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
1.888 7.3000183 m
(")s
/Cs1 SC
1 1 1 sc
CM
1 225 m
40 225 l
40 192 l
1 192 l
h
1 225 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 251 m
574 251 l
574 284 l
535 284 l
h
535 251 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 208.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-11.326 2.3000183 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
-3.326 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
1 97 m
40 97 l
40 64 l
1 64 l
h
1 97 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 379 m
574 379 l
574 412 l
535 412 l
h
535 379 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 80.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-10.454 2.3000183 m
(&)s
/F1.1[ 12 0 0 -12 0 0]sf
-4.198 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
142.5 181 m
206.5 181 l
212.02284 181 216.5 176.52284 216.5 171 c
216.5 158 l
216.5 152.47716 212.02284 148 206.5 148 c
142.5 148 l
136.97716 148 132.5 152.47716 132.5 158 c
132.5 171 l
132.5 176.52284 136.97716 181 142.5 181 c
h
142.5 181 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
676.5 295 m
740.5 295 l
746.02283 295 750.5 299.47714 750.5 305 c
750.5 318 l
750.5 323.52286 746.02283 328 740.5 328 c
676.5 328 l
670.97717 328 666.5 323.52286 666.5 318 c
666.5 305 l
666.5 299.47714 670.97717 295 676.5 295 c
h
676.5 295 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 174.5 164.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-20.872 3.9000244 m
('\(\)*")[ 12.000000 8.000000 7.104000 8.432000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
243 89 m
344 89 l
349.52286 89 354 84.52285 354 79 c
354 64 l
354 58.477154 349.52286 54 344 54 c
243 54 l
237.47716 54 233 58.477154 233 64 c
233 79 l
233 84.52285 237.47716 89 243 89 c
h
243 89 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
777 387 m
878 387 l
883.52283 387 888 391.47714 888 397 c
888 412 l
888 417.52286 883.52283 422 878 422 c
777 422 l
771.47717 422 767 417.52286 767 412 c
767 397 l
767 391.47714 771.47717 387 777 387 c
h
777 387 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 293.5 71.5 cm
-45.192001 3.9000244 m
(+*,-&.*/\)*")[ 10.880000 8.432000 8.432000 4.432000 6.256000 8.000000 8.880000 13.328000 7.104000 8.432000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
409 192 m
448 192 l
448 97 l
409 97 l
h
409 192 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
943 284 m
982 284 l
982 379 l
943 379 l
h
943 284 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 428.5 144.5 cm
-14.212 2.3000183 m
(!)s
/F1.1[ 12 0 0 -12 0 0]sf
-5.7800002 7.3000183 m
("0%)[ 4.656000 9.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
409 225 m
448 225 l
448 192 l
409 192 l
h
409 225 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
943 251 m
982 251 l
982 284 l
943 284 l
h
943 251 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 428.5 208.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.3280001 2.3000183 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
1.6720001 7.3000183 m
(")s
/Cs1 SC
1 1 1 sc
CM
409 97 m
448 97 l
448 64 l
409 64 l
h
409 97 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
943 379 m
982 379 l
982 412 l
943 412 l
h
943 379 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 428.5 80.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.4559999 2.3000183 m
(&)s
/F1.1[ 12 0 0 -12 0 0]sf
0.80000001 7.3000183 m
(")s
/Cs1 SC
1 1 1 sc
CM
409 64 m
448 64 l
448 31 l
409 31 l
h
409 64 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
943 412 m
982 412 l
982 445 l
943 445 l
h
943 412 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 428.5 47.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-5.4320002 2.3000183 m
(")s
/F1.1[ 12 0 0 -12 0 0]sf
0.77600002 7.3000183 m
(")s
/Cs1 SC
1 1 1 sc
CM
1 64 m
40 64 l
40 31 l
1 31 l
h
1 64 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -534 476 cm
535 412 m
574 412 l
574 445 l
535 445 l
h
535 412 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 20.5 47.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-10.43 2.3000183 m
(")s
/F1.1[ 12 0 0 -12 0 0]sf
-4.2220001 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -534 476 cm
574.5 331.5 m
616 331.5 l
616 311 l
656.10016 311.21677 l
S
0 i
CM
130.10004 164.74001 m
122.11637 167.7832 l
122.08394 161.78328 l
h
130.10004 164.74001 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
664.10004 311.26001 m
656.11639 308.2168 l
656.08392 314.21671 l
h
664.10004 311.26001 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
574.5 267.5 m
616 267.5 l
616 311 l
S
574.5 395.66528 m
615 396 l
616 331.5 l
S
574.5 428.66528 m
615 429 l
615 396 l
S
751 311.62537 m
878 312 l
878 266 l
932.60162 266.96927 l
S
0 i
CM
406.60037 208.88875 m
398.65488 212.03027 l
398.5484 206.03122 l
h
406.60037 208.88875 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
940.6004 267.11124 m
932.65491 263.96973 l
932.5484 269.96878 l
h
940.6004 267.11124 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
888.5 404.12344 m
908.5 404 l
908.5 332 l
932.60046 331.77686 l
S
0 i
CM
406.6001 144.29723 m
398.57266 147.22302 l
398.62823 141.22328 l
h
406.6001 144.29723 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
940.6001 331.70279 m
932.57269 328.77698 l
932.62823 334.77673 l
h
940.6001 331.70279 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
908.5 404 m
908.5 428 l
932.60046 428.22314 l
S
0 i
CM
406.6001 47.702778 m
398.62823 50.776718 l
398.57266 44.776978 l
h
406.6001 47.702778 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
940.6001 428.29721 m
932.62823 425.22327 l
932.57269 431.22302 l
h
940.6001 428.29721 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
908.5 395.73511 m
932.6001 395.63019 l
S
0 i
CM
406.60004 80.404655 m
398.58704 83.369797 l
398.61316 77.36985 l
h
406.60004 80.404655 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
940.60004 395.59534 m
932.58704 392.63022 l
932.61316 398.63016 l
h
940.60004 395.59534 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
828.05402 311.85266 m
827.66681 376.60019 l
S
0 i
CM
293.61899 91.399956 m
296.66678 99.381874 l
290.6669 99.417755 l
h
293.61899 91.399956 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
827.61902 384.60004 m
830.66681 376.61813 l
824.66687 376.58224 l
h
827.61902 384.60004 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.60000002 0.60000002 0.60000002 sc
708.5 221 m
708.5 284.60001 l
S
0 i
CM
174.5 183.39999 m
177.5 191.39999 l
171.5 191.39999 l
h
174.5 183.39999 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
708.5 292.60001 m
711.5 284.60001 l
705.5 284.60001 l
h
708.5 292.60001 m
S
1 0 0 -1 174.5 269 cm
/F1.1[ 16 0 0 -16 0 0]sf
-11.766 2.3000183 m
(1)s
/F1.1[ 12 0 0 -12 0 0]sf
-2.8859999 7.3000183 m
("$%)[ 4.656000 3.996000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
1 0 0 -1 -534 476 cm
708.47095 328.5 m
708.29163 433.50662 l
S
0 i
CM
174.27797 34.493404 m
177.29163 42.48827 l
171.29164 42.498516 l
h
174.27797 34.493404 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -534 476 cm
708.27795 441.50659 m
711.29163 433.51172 l
705.29163 433.5015 l
h
708.27795 441.50659 m
S
1 0 0 -1 175 18 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.7680001 2.3000183 m
(1)s
/F1.1[ 12 0 0 -12 0 0]sf
2.112 7.3000183 m
(")s
ep
end
%%Trailer
%%EOF
