%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 377.000000 134.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 377 134
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 377 134
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /g put
dup 35 /e put
dup 36 /n put
dup 37 /t put
dup 38 /E put
dup 39 /v put
dup 40 /i put
dup 41 /r put
dup 42 /o put
dup 43 /m put
dup 44 /c put
dup 45 /R put
dup 46 /w put
dup 47 /a put
dup 48 /d put
dup 49 /S put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<






00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/A 1 def
/E 2 def
/R 3 def
/S 4 def
/a 5 def
/c 6 def
/d 7 def
/e 8 def
/g 9 def
/i 10 def
/m 11 def
/n 12 def
/o 13 def
/r 14 def
/t 15 def
/v 16 def
/w 17 def
/uni2B91 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91BD326F6E6A1837BE2706B92FCAA32341FE90C82594E2DAAEF640CEE11357769C8B8208A441E0F79686FD703A92173AFE0140C45DDCAE637EE7869B4139840004276DC12B30CBD85555D0D790CADC693A33502E1F31E66081DB7B774A8C12C5EF74F4D4DDB7DED0B054A721886D7AFBA5AF7A622235D8CC0068BE08C9262D3B1C57EC93B6C4E025B5A0DE58C66435C6C51CE6AF2703DC7495CF37E19AC62BCB2A4F44FDEEFCB572C0818E0E47291F6CE33EE0987A894090C432604C794476A4CAFCF5C249EF90A3B91E4C656AF599ACE0560C35E3DEAB2AFA52B2470A5A16DCE5E4B4290FFF69B37590143FA45802B4580830084BE2F996C000702A2F790302CF5ACCC0DC4DBBE03634A1973D78EF7EBCBED7ADC1849BB2487FAAD902BEAF8B1E740061FAF8AE97CD97D1C9AEFBC72D30171E43FA79DB6CA365DB3E9A47856C535DD4750482FA20FF864BF42285BD9193F95500013C53A1154E41A3DA6BACD10CF8910065147A3D4C119F9BB7ED75ACF45D45D7002FFF2DEEFA9886E80238572D391062A3BEF0FC5131C9338BB4D3B0F611184C4F1C997B2448F3F7633AF6E8F32EAD492A32B6501A750C35EC38817CB1ABF9EA88FF53FDC95481E091266A2818D0675068362E7A80AAE8D559B4D6EFD0A760FFA1B1D65A93C319632CADBA1BBA752F80C8885895C72FD033A5505CC23CD2C2052A4A22B2FF964C3A83F5546B1483488E6EB8B80213905BB4B5E64AE8730A455FDABC99938D58E2B633AA45BF84
012B89454110C74D9DCB230A36D6A39DF4E6D2D086EAADEE6B1F1332554E2248C46FA31EBB87D46A3B61D87CF5D7910D831A7701CC4B3088513869D5F8781CA1479F664863CB088FEFABB4814F04B54DDF0226689E10384C9A41163E1774A71FEA1EE5F316438F591F4F2755625C929C241EE3EBB313C4DC46D72F6BC62757CF39107A7FE64DEA34DEABED73FAD363B67F7D2746366EA0886BECC08643488BEC90962C851D8453401B9D1009BF5E42DE120C3BEF023A155EC9D312C6F7690BC4D9D064E791DE73A326C871E3942FDA297E58482558A10B8E9DCC22E3B3B66DB6A2C6A415F0659AF4127A2FD7BC0011F161E80B24690474F3717327144B7994A4B6A4E065F5B061A5865413A70834357E0091F1DFF0AB60487A1FAE4C2CFC220083010DF3E559D5567586E2094C826D83E248975B5B03DD14613A6957B7822B6DF4DD8885EA7A7523C5C07490FF89EEA32A5C5B8524CD09AB38F19A4EAA7D063FCD987F68420F2455DFB1131FF1322CAB4694884A0BF380BD4912A997E06BF9B22641A4B78E50019BDA2FF07ADE6ECAD328C577C420FCF6F29A37D0FA379626020B6EBD892EFDE46CDE099C7F47C0C854B1FF1501A3F25F1C7FBD4E288685A5D06632112BA78E0D234F278D67BF7986E42C4E738FB3B150F6A0B55EF567E0CF6A10863AEBB981A18A5D795EDB63736A656D21AE3E00BB819D71474323EE1F3D2229E4CC5611DC7CDB92F24A728A50F35B119E203578B1F0717DD7A8D0B9DB3404479EE60073ECA56F55D2838C12E1F342EB07A16AB827EB0D8321411464EFD250DB2001F4D92AF483142E73899C977B21B0B53BBCE9EB7D84263406EA8E0F1211A0ED7D11AE4E79B0FA87C89737915EFC08C8133030734AA30D1332BBDC4103EBCF70D7BC8BFA0248D1321103F3C63901AA82399283D26E15CF78AEDFFCE56679FA55FEB53F0A0D8DDA0B01E2888222226769906DAB11E5FAB80D9F6DE92450F7283B98239088FB66268FF79B3217B804D225C4CFBEB6AD6E7E17E8044020AA25F24AB4F43F1F748C4C77B124737FE2F53A564A02BFA9F3BA93080897A1A971E57779741043678F3D27C8D0AA7A7149B99A181FB88B36D83B2EBD8046F4F0E0424EF813ADBCE5628ED18876B32B77F2E41B258A4802DEF673D58C1D5588B04268508260563FD40700A8713A5DC54F7E499B0A7013ACB0AB33602D14075AE12BC327412906BD6623B47EA04D5031036768E569511CDA87DA4DF2B7B626B6E0EC062B3F16D3183D59D9AFAF7046CFA3FEE906CF2F0C36FFFABF3E481285B3B6056AED7300E456ECC9A14D9B4912942C46138EAE4CFBFD7DED243AC06A98C16B0928240BF8A8981CC0A72C090FECD8584D3111A107D71BAC4408DDABE90B2DCB1549EFDC8011F292DE120FCA44000D2566E3AF16971C530C9FCF68B7571A31A8EE7C

9E412E4F3952695A784F310C59A84BF499DEB896A58B6C19B05276BC49B4A69FB441523012E8343AD5E8C946A064B10CB19CCD3DF87866694D37EEC93055881A7D23A7BBD6CA7ADADCE5B84078BD1D097251424820E71ECD270E4DDC97A8E9AAA9D4DBA47C338A4373843AEF6D1FAB523E7C5305A49AEB4AAEAF9FA3E3669D7699B584204FBEFFE87C7A9F78FF6350AFBEA32EB2EE804BB8D878051ADCE0976B09E7E0C7536AECB68CF77C36315CDEC528586E26D58FF2897C31E68539DEBF3D752E2494040073AE1F72CABE4D4FA564F73B6430DB0BFF213FC5A131AECCEE0D284256EB975A2E93B1A2520C6F60D7A791706EE55417CE420A97B178791F99C2DDC64BE4F6322A83FC17A077D0AA334D51046E60E09B748F57A9D2EA2A58701D7BFD564659758B6CF94EF7A26504CF22CF91BB72952EFF8F88726237B32481E7467C43AD52B9742652424E3B523F97DB3366C6CEE5B4138B389BFB7466EFC619CCAC5AFDCF8421108CB977A43BEF712B6B3BB9D295E16EB3B75137E821DE61220A20745C726DA25224C554674085462BD969FFD033CBBF0B8880ADD984251EBE0F02230F901D5706D055FEFC3FA66EEBF33D326FDC2F6A1E4B1CC6043FB8662AD3FA24B3C23ACF148F3337E96851F833B4BF6A1317EE0FD0896085D6CF61E9A1D2EAAC8233C9107AD8AEDC1CDE861CECA1D0D36270E643630ED8D4F5532711A3B498D6F0296E9171BB4188ED7EFF2E07765E7AE2D2CDC7F7C3D5C0AF3626066B6CEA8438F76B1FB123F361492318776CD3D7638FFAB457AA41224C0C4CA73FAEDF2745270F9AD5278ACE5BA21A8684913AD1EE824713033314CD50914788AC7044894A2F37D5145804030037259657FBC99D2D922213B990928BAD020FA5E54965C589225138E2A4644420FB04F1203DB0250CA08B2F47166C910B3EA7CDBE0B2A8B9FC265E663A4CDF96527ED554D32C112DB0CE2F1DD76006C4A54BAD2E406432F6AEF492ED017E4E58AAB5AFF535457F1A4EE28CD45F4F3E417B46D35A257CDC72D582CFC4951A18F2F33733BB8FC2BB6DD5BBD35BCCD3CF394281FBC5396E4EAFAF3B4FE171D1F9020608BB21B770A7FA5FCA01760D49B6BE95D9D200135D7360592E858DDE6F2940D378E0121047FCE0E91
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Times-Italic
%!FontType1-1.0: Times-Italic 1.0000.0.0000
14 dict begin/FontName /Times-Italic def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /a put
dup 34 /t put
dup 35 /r put
dup 36 /s put
dup 37 /plus put
dup 38 /one put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -606 1 index div -845 2 index div 3401 3 index div 2468 5 -1 roll div]cvx def
/sfnts [<
74727565000900000000000063767420000000000000009C000005446670676D00000000000005E0000007D6676C79660000000000000DB8000009306865616400000000000016E80000003668686561000000000000172000000024686D74780000000000001744000000286C6F6361000000000000176C000000166D6178700000000000001784000000207072657000000000000017A400000766057400000538001A05550013036D001A0000FFDA0000FFE80000FFF1FE5AFFFE0534002DFEAAFFE1031C000000A0000000A00000000000000000002100AA009400C20078007D0021008200B80028002A0046000300A8004D005900E4014000300002009B0087009400F600180047006B01E0001A00AB006800CE0003002500450097001600470064007600B800260043008700B500DC0037005B007900B100C900D60021002C0052005500C402ADFFD20031009800D001B70403FF90001A002E0036006D0084008EFFAC002D003D00470080008601230173FFED005D005D006D0082009100A200D4FFD2FFDA0007000A0028002A003C003D0051008700B10109011E014001850006000E00100025003000500055005600A200B401080247FF72FFDA0013003400400041004800580068007B008C009A00B100C300DA015E027403ADFF44FFBDFFCF0000002400250026002D0039004A004F007200740087009700B600B900F90156020EFF24FFA1FFB9FFC7FFEF000000020005001D001F0024003D004B0058005D0067008E009A00B800C900D800DA00DA00E400E6010C013B014101500185019801C701D30245032D038703B20410051FFFF8001C00210027002A002A00300037003B0055005C005F00610072008D00A400AD00B100EA00F6011801240134014401A1021D02290266026F02C402EF0403048B04E4FFEA00000002000200030007002E00350039003E004C004C0055006D0077008A008E0090009300940096009A00A800C000CB00DC00DF00ED00F900FC0105010701080128012F01340149019801D801DE020E02160223024202DF032B033E036F04D104E40545FE8EFEF2FF58FF59FF71FFBBFFC7FFDE0007001D001F002D0039005B005E005F0064006700760079007E008000800080008300830088009F00A600A900AA00AF00BE00C000C800CB00CE00D200DD00DF00EB00EC00ED00ED00F400F800FC00FD0108010C011001100115011C011C0125012D013B013E0140015001510176017E018001830184018E0198019D01B401BB01CA01D302470258025D027D028802BC02D102D302DC02E802EC02F70309031D0321038703C90447045A04AC050E055F057B058005AF0636FDF4FE37FE57FE5EFE76FECDFF07FF0EFF2AFF76FF7DFF9EFFB8FFB9FFF0000000020008000F00170023002A002B004B004C004E004E00500051







00>] def
/CharStrings 10 dict dup begin
/.notdef 0 def
/plus 1 def
/one 2 def
/a 3 def
/r 4 def
/s 5 def
/t 6 def
/macron 7 def
/dcroat 8 def
/dong 9 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-606 -845 3401 2468}def
/UniqueID 4461026 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934F311A01D47A37EC44804573682C74DB681BB4C04B20580D7EA90A1C3058C274014E60DEF828F7E43458A43BBCAF743C12FFE9B891B63B3979ED15E5473BE8F5CB67D3AF90B957F81D6455C0DD949A0290134C026E78F1443F95ACEC6A68E9B82012859AC6D51FF2DD241D5CC2C8B4D127793D12E5165B69A980CB42D1EB6AAC4545066357A015AF3980DE7B7E4AB474CFE3E8B56F29D6D496B41DDC8A8445295BD55EED8DF04373DDAD27D0539AE29ABC5B7205CEC20CE1F3F8DECCD7CBBC49B3C0E79804C92AADEF6A1CC6EE74FF7159413E61309D68D90F2B81C09D5D6BFA3E6C8A2FCA49D8F7D3EA11281F7DDCE1CBC42E141A2A9854E06620966F103DC679A545CF27277AA27EB413091F5D28B17348317B95452DCA743F1C0A1899D49D26C7BFE6A86ACB5204D4B2AE2923A864BC4FB687F0B640BA61B6FFA9CB8D71F3C3B21DF54773356E91F962F93016D7A41208E9196B1956A7CE299286DC6F99262C02F83AB9D39036CFF2095A4C75B192A1E631C72899E5F13AC4644DDFCADA79A60DECA75AD41834059A0BD816FBA549103770AE88D41C44217D769970C7BFE844531C766906F3D97ED2666E9E230B850C7FACB98941061745A2FB7A74AAFAC2EDBC712B2393D4D378084FD061A283556DCFB35D42AD5CAC7E8705E66C99D32523661486C3664B67C8EB5178BC3D140248D4F804862DB65427E09C04FF94ADB15426F70182459B8EBC67324278A848880E0F32FDC8C991D34E46F540115E6EFE5F73CE6DE65E82DF78E74BED291F7658F5B75E6C

ABD6CD3B86577F43B1EEE8662FEE63C0AB22D653E12C5CB305104971E69B9C770C7303DE11D8C8B5BCEECF218019943951DFE7D7AEC701AF9D5B0F3C561EF7E37431C102DC93FBDB364232EF4D957B67C7FBD037AB2BC9EA27960455931AA905EF3302FB3CB137778AC1DD65854275438BBACAA1D291E06F76F4BA1A5328C59AC4827A45FA193D26ED96670210C880FEEC29FD24165E2815D78FDEA1059F0D9F257AF4682EC7E0F85391E149CE7CCC956AE0C2DD92D1554193C8A645B9E985555017A16126CC36208D3A976F4274BCE6FF9E9E17A55CE4809588B94A465DB3B914C857A0389AF980DC34E3FB8543E7EEEFC38F400C3F25E9CBFF9DA981F7BE0988302F2AB3294ED074EE0A331BF3F96148D57E26B3DE2B8E097A1D78C96E398C2BEAEE74D7578BC107C3E2E3D40251D2C163F711AE4CABC79D0EA62682987E5C81C574D8365B35FCC21AF0678E85FF4B0B312B5D5B8FE715B306FFC0C2152A4C74B9C3931C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Times-Italic cguidfix
/F2.1/Times-Italic renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 377 134 rc
-1020.3448 836.03448 m
1430 836.03448 l
1430 -1133.6207 l
-1020.3448 -1133.6207 l
h
-1020.3448 836.03448 m
f
166 133 m
235 133 l
241.07513 133 246 128.07513 246 122 c
246 108 l
246 101.92487 241.07513 97 235 97 c
166 97 l
159.92487 97 155 101.92487 155 108 c
155 122 l
155 128.07513 159.92487 133 166 133 c
h
166 133 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -310 265 cm
476 132 m
545 132 l
551.07513 132 556 136.92487 556 143 c
556 157 l
556 163.07513 551.07513 168 545 168 c
476 168 l
469.92487 168 465 163.07513 465 157 c
465 143 l
465 136.92487 469.92487 132 476 132 c
h
476 132 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200.5 115 cm
/F1.1[ 16 0 0 -16 0 0]sf
-21.040001 5.776001 m
(!"#$%)[ 10.368000 9.184000 8.592000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
147 49 m
254 49 l
260.07513 49 265 44.07513 265 38 c
265 24 l
265 17.924868 260.07513 13 254 13 c
147 13 l
140.92487 13 136 17.924868 136 24 c
136 38 l
136 44.07513 140.92487 49 147 49 c
h
147 49 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -310 265 cm
457 216 m
564 216 l
570.07513 216 575 220.92487 575 227 c
575 241 l
575 247.07513 570.07513 252 564 252 c
457 252 l
450.92487 252 446 247.07513 446 241 c
446 227 l
446 220.92487 450.92487 216 457 216 c
h
457 216 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 200.5 31 cm
-44.759998 5.776001 m
(&$'\(\)*$+#$%)[ 9.776000 8.896000 8.000000 3.552000 5.040000 9.184000 8.896000 13.648000 8.592000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -310 265 cm
556.5 150 m
637.84766 150 l
637.84766 234 l
585.40002 234 l
S
0 i
CM
267.39999 31 m
275.39999 28 l
275.39999 34 l
h
267.39999 31 m
f
0 J
0 j
1 0 0 -1 -310 265 cm
577.40002 234 m
585.40002 237 l
585.40002 231 l
h
577.40002 234 m
S
1 J
1 j
[
1
4
] 0 d
0.60000002 i
446 241 m
411.11874 241 l
S
0 i
CM
93.118752 24 m
101.11875 21 l
101.11875 27 l
h
93.118752 24 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -310 265 cm
403.11874 241 m
411.11874 244 l
411.11874 238 l
h
403.11874 241 m
S
1 J
1 j
[
1
4
] 0 d
0.60000002 i
445.82352 227 m
410.94229 227 l
S
0 i
CM
92.942276 38 m
100.94228 35 l
100.94228 41 l
h
92.942276 38 m
f
0 J
0 j
[] 0 d
1 0 0 -1 -310 265 cm
402.94229 227 m
410.94229 230 l
410.94229 224 l
h
402.94229 227 m
S
1 J
1 j
0.60000002 i
401.04227 227 m
366.98837 227 l
366.98837 157.42035 l
455.10001 157.42035 l
S
0 i
CM
153.10001 107.57966 m
145.10001 110.57966 l
145.10001 104.57966 l
h
153.10001 107.57966 m
f
0 J
0 j
1 0 0 -1 -310 265 cm
463.10001 157.42035 m
455.10001 154.42035 l
455.10001 160.42035 l
h
463.10001 157.42035 m
S
1 J
1 j
0.60000002 i
401 240.71568 m
353.57382 240.71568 l
353.57382 144.12837 l
455.10001 144.12837 l
S
0 i
CM
153.10001 120.87163 m
145.10001 123.87163 l
145.10001 117.87163 l
h
153.10001 120.87163 m
f
0 J
0 j
1 0 0 -1 -310 265 cm
463.10001 144.12837 m
455.10001 141.12837 l
455.10001 147.12837 l
h
463.10001 144.12837 m
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
402 207.28432 m
402 260.7157 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 354.5 72.077972 cm
/F1.1[ 12 0 0 -12 0 0]sf
-17.5 -5.5 m
(!,%\(*$)[ 7.776000 6.444000 3.780000 2.664000 6.888000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
-17.5 8.5 m
(!)s
/F2.1[ 10 0 0 -10 0 0]sf
-11.5 13.5 m
(")s
1 0 0 -1 84 72.077972 cm
/F1.1[ 12 0 0 -12 0 0]sf
-21 -5.5 m
(-#./\)0)[ 8.220000 6.444000 9.096000 6.444000 3.996000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
-21 8.5 m
(#)s
/F2.1[ 10 0 0 -10 0 0]sf
-16.330078 13.5 m
(")s
1 0 0 -1 19.5 72.077972 cm
/F1.1[ 12 0 0 -12 0 0]sf
-13.724 -5.5 m
(1%/%#)[ 7.776000 3.780000 6.444000 3.780000 0.000000 ] xS
/F2.1[ 12 0 0 -12 0 0]sf
7.0517578 8.5 m
($)s
/F2.1[ 10 0 0 -10 0 0]sf
11.72168 13.5 m
(")s
1 0 0 -1 119 48 cm
/F2.1[ 12 0 0 -12 0 0]sf
-10 1.5 m
(#)s
/F2.1[ 10 0 0 -10 0 0]sf
-5.3300781 6.5 m
("%&)[ 2.778320 6.748047 0.000000 ] xS
1 0 0 -1 120.82353 14.5 cm
/F2.1[ 12 0 0 -12 0 0]sf
-10 1.5 m
($)s
/F2.1[ 10 0 0 -10 0 0]sf
-5.3300781 6.5 m
("%&)[ 2.778320 6.748047 0.000000 ] xS
ep
end
%%Trailer
%%EOF
