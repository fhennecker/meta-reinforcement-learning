%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 672.000000 314.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (Build 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 672 314
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 672 314
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: CMUSerif-Roman
%!FontType1-1.0: CMUSerif-Roman 1.0000.0.7000
14 dict begin/FontName /CMUSerif-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /s put
dup 34 /i put
dup 35 /g put
dup 36 /t put
dup 37 /a put
dup 38 /n put
dup 39 /h put
dup 40 /c put
dup 41 /hyphen put
dup 42 /one put
dup 43 /x put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1135 1 index div -387 2 index div 1495 3 index div 1094 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/hyphen 1 def
/one 2 def
/a 3 def
/c 4 def
/g 5 def
/h 6 def
/i 7 def
/n 8 def
/s 9 def
/t 10 def
/x 11 def
/grave.cap 12 def
/grave.uc 13 def
/uni0300.cap 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1135 -387 1495 1094}def
/UniqueID 4069853 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CA4055EE8746D9A2C65433B2267FD1CCC371F46876341E35392177C0263EEE28CFA476D20D38BDD67E0F74A687175FE2AE507B7E5A24573D3A365AD3CADF1CE52F9F178E91B06E77BB67DBCB6962CBE5DA4C61FF8758CDB14E1B14FA28E4212B74D089F48B4E3710E43DDFD5E10C5670C12FA62F46B9747B6D7BF86BB32AC304A9C539A2179A72266280333FFB3DCC811E62DD2FADACFD53EC292249B113329F5F1DEE68EE7097E6DC52C1BCD725182F2AE7B0E2EE8E9B48F2DE3816185A3DE61FA60B9247908603BB31ACCFFF47A201824ACEE5D785C9B2A366221713A1532983DE477B937524135F5FDC6D2CD3FAF905CDAE11BAED639D4EF72885AE6D220C0C9BDB4EDD292CAB32B40A9767116030C60329F9B12255A4504A6B5871513EBBE2D7608014A0D3AA10EAE806827E5E0BA41E184D7B160C9317FC4E0202565D5D3B6A9AB75ED6ADEC582F8B7EE1CF0125C73B31BA866233E2AE1D222DC7A81072BB495D1C54E74532ECA055AD9237E1E5B8943E914718EC0637130794FF57E8950E6A7C8EC3AA2E8FF149A5F46520B037F9301A2A33407546AB6B155B69110B9C5CA0CB5D40F833329B613B5BA7F322FD57AF5E4C21A6EC6AF5D71D9E616B95FC3CF6E081D4F44BB41579FB2934C4D72B169C9BC7F31D59E354DA70E1A42A66A6A1BA456BE9EF687B0910718D753BB6425737544CFACCF19868918B9E1163B5D055A3B317D4799B2B7829BD2C845E588B8CE69A80892491D4722AC0F9C708D132F06B3A5B8CD5BB1FF32B5A02034F9829E16B79E
415C233999198431B6C08A0C28F2D892DAB4D1874C4BA0151E58E100576E1BD9655558467AA331743AACC6C0C46AF8BEC1D9BB3C02E582967B817B9D3DEFE6A7FFF92426AD5D446EA7604FAC319C2E6A9DD5F1DC0658E61546014E33D0F6EFD4FAD2A9A912CE213BE0464C41324B65AE36CAE8D8C2CD50D53964CDD172FE9375BA0318FA4CAF3F1C9EA9C85929C93BD00E878F22D513121F07FED7F714A04F4E7F90386833E843038FA018F23FD1B11F022F52349EBCAD4E9D29ABB4020759A173D897A1DEB73D41896C917B68351E67478F7FFE092386DE926A5932C1580A26BE223402FEC79685954A15E4BB480814EED74F9467C76DA81B429E705B9614A1F28B7C2ACD27624F6BD1E50AE9A08C2346640D0C28745429F69C4286E51E66BD9787D254E1C7056887FCAEC535999BB19690BC8E874E558286C94E478876E78D008E50AC2C8813C32D93DEA85772B396E12CAA4C797876F28B78C8ABBA3DC71817E6A8AB29F3C049A1CA48FE730296A60518D493DC71114A1DDCF1A516E267F0B983FC67EF66858AC8DC39D20A9ED45923F80FCB5A10B203EFCF5D4FFCBB049393151B8C9526369CBF55959D5A09262A18BC3C9B65B79678297DDBCA5F43A04F5854DC967682C0BB7006E3F0900B7CCC775A041AE55BD9191AF4E184EFF40DFEE2B4DD1522F644CFC328FAC9919680C062644999B8E1564F0B2EAABAD540CA7162F041C3DFFA1283479EC926B5DDF6130DB3354222943CCAFE2628B7E01D54F8B4CB8E4E71E68A573C0D21072DA1F7BA62A05D37A13120B731B2FDDF67F32505DDE742239AE253A0E4F1DB502FADB8451CEF4112665289AB54B4873A4D16121587B41545B941AD34B7E21EBD6E850B1335EB1302C87E89EB169318077DE4517BB40ECA0A229B5C7139AB9476F90E2369C4B1B1F0061259955D9A4D416A1CAB467BEF21319BCE1EB0313A775591073FFDA513649A757B31BC552838A7F2F6B9558076899DCA8B044C7280FA79983819DAAF729707B4E8EC22DEB6E038ADADCDD8FEFCBC6D2C478060B65D9A727A4C8E7745B7E3264068A17EA2B7A32CD561A1D3BB482828A2D90EECC946DD96E04F3EAA3BA02A4B3FFF29EAEDC7A2DA061F556751E23321C86A0CB29412D88DEB5B58F0E6C993588E12A76F786B21AA040CD0F5FC21CA1F59B8ABC69D30358F51A8C7EB03944A927060741ECEE306F7F3F6C22C694392720276EB3A5D54B5E3F72F11430EB60FCA00E06683DA954CEF6AC3986DA3BB23BD3B760C5560A6CCBCEFEE1D6B26951744E8D853DB7A55D1DC58162D02FCA8519049653CFF83B1B06BF8C4E2BAB4B05F2190E84588AE5A68DF5CAC188E09A78CDB05F4571BCFBED577D63ED5B536C74D9979814F0A45535FD533C047FDCF96F2B1002BE7CF715E8A20A2557847213E36E955778D20D6F45AC5E8DB2DD7

F367D3AAC21EE24B40B69C814EFFBDFBE5DD967856A830AB68E74924844001FC6C29936084DCFDA00A9E09D5048B077C3E3D59345CDF9074E65C3DF711F8C8464E8404CF3694699523DB9BEDFDD3F6E05267223F2E5431BAEE8C0CC0CF16681796211E819E315370DAB7523459D97F22D67251F0E16548B72F4B7158B86F1560BC30DE61C2F2E6E081A42CE4E02D7DAD063140E85D94AE1BD580AC82D82732FD4D783FF550F7B5BB3E3140BEC9CD965A68E19F05A875294CA76F2DFC7760A3CDE9DA14C6A3B9D8953D9DE91238AF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/CMUSerif-Roman cguidfix
/F1.1/CMUSerif-Roman renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
dup 34 /plus put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 4 dict dup begin
/.notdef 0 def
/plus 1 def
/x 2 def
/uni2B91 3 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C94CF017316529A80F552C33559AB2C21302561FE61E935C1E32B3C9EA963332618F471070EE193F61A94258BC6AD24214B0D5C35EA1380EBC43D26032C674BF749EACE9AA6138229683D0A55C6CE8FC78F7BAFE0BF09A371D4FF4DB8A3304F7662818DC4169D635F4A37AB11F8E24ED6F2D5A6722EDC1EEE8C933FC4EBCB84990E5C6B124D14AA8A08CE2218DA62FC2E590F63DB9F9855B0AADB3FE8E708C5AA8969C8044B81ECC9CF807ABB6E4DEF354E7C06C9907091C8DEFA227092684355A28FFBB4EE47C12A79167520AFA802CC29F8F9EA26CEE13BCD9ED7E6447EB37A5883B7B4CD8EC5AACDD933E8B33C7322C42D487A32821DD84416827F408ABF1E9EC7D47AE1978B24E9F17361F681C358596BE903EED7194762DDAEBF08F1D3CBDF68042DACC59E9C89556AE2BE5207800EC0A7167F586C98797A262EB26A0030A55EF7B8CECB68E9B88E24DA1D75674D97EDF052DC0E1BB8890FAB19A5B6C1138A379093C861F311E0D0CCE0223EE4051D8E7E7F7A33C29EE3749CB19441143E837974AEC91A8682964E16FFC8AD95DB587F1986621038D4B172991F0602A3F0C49F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 672 314 rc
-925.30951 1117.8334 m
2152.0715 1117.8334 l
2152.0715 -1166.6904 l
-925.30951 -1166.6904 l
h
-925.30951 1117.8334 m
f
147 252 m
531 252 l
536.52283 252 541 247.52284 541 242 c
541 62 l
541 56.477154 536.52283 52 531 52 c
147 52 l
141.47716 52 137 56.477154 137 62 c
137 242 l
137 247.52284 141.47716 252 147 252 c
h
147 252 m
f
1 J
1 j
0.60000002 i
0.50196081 0.50196081 0.50196081 sc
1 0 0 -1 -89 497 cm
236 245 m
620 245 l
625.52283 245 630 249.47716 630 255 c
630 435 l
630 440.52286 625.52283 445 620 445 c
236 445 l
230.47716 445 226 440.52286 226 435 c
226 255 l
226 249.47716 230.47716 245 236 245 c
h
236 245 m
S
0 0 0 sc
205.95238 273 m
253.59999 273 l
S
0 i
CM
172.59999 224 m
164.59999 227 l
164.59999 221 l
h
172.59999 224 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
261.60001 273 m
253.59999 270 l
253.59999 276 l
h
261.60001 273 m
S
1 1 1 sc
CM
193.77817 231.77817 m
198.07396 227.48241 198.07396 220.51759 193.77817 216.22183 c
189.48241 211.92604 182.51759 211.92604 178.22183 216.22183 c
173.92604 220.51759 173.92604 227.48241 178.22183 231.77817 c
182.51759 236.07396 189.48241 236.07396 193.77817 231.77817 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
282.77817 265.22183 m
287.07394 269.51761 287.07394 276.48239 282.77817 280.77817 c
278.48239 285.07394 271.51761 285.07394 267.22183 280.77817 c
262.92606 276.48239 262.92606 269.51761 267.22183 265.22183 c
271.51761 260.92606 278.48239 260.92606 282.77817 265.22183 c
S
0 i
1 1 1 sc
CM
332.77817 231.77817 m
337.07394 227.48241 337.07394 220.51759 332.77817 216.22183 c
328.48239 211.92604 321.51761 211.92604 317.22183 216.22183 c
312.92606 220.51759 312.92606 227.48241 317.22183 231.77817 c
321.51761 236.07396 328.48239 236.07396 332.77817 231.77817 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
421.77817 265.22183 m
426.07394 269.51761 426.07394 276.48239 421.77817 280.77817 c
417.48239 285.07394 410.51761 285.07394 406.22183 280.77817 c
401.92606 276.48239 401.92606 269.51761 406.22183 265.22183 c
410.51761 260.92606 417.48239 260.92606 421.77817 265.22183 c
S
286.5 273 m
392.60001 273 l
S
0 i
CM
311.60001 224 m
303.60001 227 l
303.60001 221 l
h
311.60001 224 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
400.60001 273 m
392.60001 270 l
392.60001 276 l
h
400.60001 273 m
S
1 1 1 sc
CM
167 119 m
205 119 l
205 97 l
167 97 l
h
167 119 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
256 378 m
294 378 l
294 400 l
256 400 l
h
256 378 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186 108 cm
/F1.1[ 14 0 0 -14 0 0]sf
-8.1969995 3.1000214 m
(!"#)[ 5.516000 3.878000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
236.5 119 m
274.5 119 l
274.5 97 l
236.5 97 l
h
236.5 119 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
325.5 378 m
363.5 378 l
363.5 400 l
325.5 400 l
h
325.5 378 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 255.5 108 cm
-8.1969995 3.1000214 m
(!"#)[ 5.516000 3.878000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
306 119 m
344 119 l
344 97 l
306 97 l
h
306 119 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
395 378 m
433 378 l
433 400 l
395 400 l
h
395 378 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 325 108 cm
-13.986 3.1000214 m
($%&')[ 5.432000 7.000000 7.770000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
375.5 119 m
413.5 119 l
413.5 97 l
375.5 97 l
h
375.5 119 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
464.5 378 m
502.5 378 l
502.5 400 l
464.5 400 l
h
464.5 378 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 394.5 108 cm
-8.1969995 3.1000214 m
(!"#)[ 5.516000 3.878000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -89 497 cm
274.99997 377.5 m
274.99997 294.39999 l
S
0 i
CM
185.99998 210.59999 m
182.99998 202.59999 l
188.99998 202.59999 l
h
185.99998 210.59999 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
274.99997 286.39999 m
271.99997 294.39999 l
277.99997 294.39999 l
h
274.99997 286.39999 m
S
/Cs2 SC
0 sc
1 0 0 -1 186 226 cm
/F2.1[ 16 0 0 -16 0 0]sf
-4.1440001 5.776001 m
(!)s
1 0 0 -1 325 226 cm
-4.8000002 5.776001 m
(")s
/Cs1 SC
1 1 1 sc
CM
332.77817 167.06329 m
337.07394 162.76753 337.07394 155.80272 332.77817 151.50696 c
328.48239 147.21117 321.51761 147.21117 317.22183 151.50696 c
312.92606 155.80272 312.92606 162.76753 317.22183 167.06329 c
321.51761 171.35907 328.48239 171.35907 332.77817 167.06329 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
421.77817 329.93671 m
426.07394 334.23248 426.07394 341.19727 421.77817 345.49304 c
417.48239 349.78882 410.51761 349.78882 406.22183 345.49304 c
401.92606 341.19727 401.92606 334.23248 406.22183 329.93671 c
410.51761 325.64093 417.48239 325.64093 421.77817 329.93671 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 325 161.28513 cm
-4.1440001 5.776001 m
(!)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -89 497 cm
414 377.5 m
414 359.11487 l
S
0 i
CM
325 145.88512 m
322 137.88512 l
328 137.88512 l
h
325 145.88512 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
414 351.11487 m
411 359.11487 l
417 359.11487 l
h
414 351.11487 m
S
1 J
1 j
0.60000002 i
414 326.21487 m
414 295.89999 l
S
0 i
CM
325 209.10001 m
322 201.10001 l
328 201.10001 l
h
325 209.10001 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
414 287.89999 m
411 295.89999 l
417 295.89999 l
h
414 287.89999 m
S
1 J
1 j
0.60000002 i
359.80917 377.70312 m
359.80917 365.80313 l
359.80917 349.54398 l
359.80917 346.78256 362.04776 344.54398 364.80917 344.54398 c
392.8454 344.54398 l
394.8454 344.54398 l
S
0 i
CM
313.8454 152.45602 m
305.8454 155.45602 l
305.8454 149.45602 l
h
313.8454 152.45602 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
402.8454 344.54398 m
394.8454 341.54398 l
394.8454 347.54398 l
h
402.8454 344.54398 m
S
1 1 1 sc
CM
437 205 m
475 205 l
475 183 l
437 183 l
h
437 205 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
526 292 m
564 292 l
564 314 l
526 314 l
h
526 292 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 456 194 cm
/F1.1[ 14 0 0 -14 0 0]sf
-13.986 3.1000214 m
($%&')[ 5.432000 7.000000 7.770000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
463.77817 167.06329 m
468.07394 162.76753 468.07394 155.80272 463.77817 151.50696 c
459.48239 147.21117 452.51761 147.21117 448.22183 151.50696 c
443.92606 155.80272 443.92606 162.76753 448.22183 167.06329 c
452.51761 171.35907 459.48239 171.35907 463.77817 167.06329 c
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -89 497 cm
552.77814 329.93671 m
557.07397 334.23248 557.07397 341.19727 552.77814 345.49304 c
548.48242 349.78882 541.51758 349.78882 537.22186 345.49304 c
532.92603 341.19727 532.92603 334.23248 537.22186 329.93671 c
541.51758 325.64093 548.48242 325.64093 552.77814 329.93671 c
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 456 161.28513 cm
/F2.1[ 16 0 0 -16 0 0]sf
-4.1440001 5.776001 m
(!)s
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -89 497 cm
425.5 273 m
647.73816 273 l
S
0 i
CM
566.73816 224 m
558.73816 227 l
558.73816 221 l
h
566.73816 224 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
655.73816 273 m
647.73816 270 l
647.73816 276 l
h
655.73816 273 m
S
1 J
1 j
0.60000002 i
544.92834 273 m
544.94885 281.60004 l
S
0 i
CM
455.96799 207.39999 m
458.94888 215.40714 l
452.94888 215.39281 l
h
455.96799 207.39999 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
544.96802 289.60001 m
547.94885 281.59286 l
541.94891 281.60721 l
h
544.96802 289.60001 m
S
1 J
1 j
0.60000002 i
545 314.5 m
545 316.31488 l
S
0 i
CM
456 172.68513 m
459 180.68513 l
453 180.68513 l
h
456 172.68513 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
545 324.31488 m
548 316.31488 l
542 316.31488 l
h
545 324.31488 m
S
1 J
1 j
0.60000002 i
546.41888 349.1275 m
546.41888 361.02753 l
546.41888 421.39993 l
546.41888 424.04568 548.56372 426.19049 551.20947 426.19049 c
556 426.19049 l
649.59998 426.19049 l
S
0 i
CM
568.59998 70.809525 m
560.59998 73.809525 l
560.59998 67.809525 l
h
568.59998 70.809525 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
657.59998 426.19049 m
649.59998 423.19049 l
649.59998 429.19049 l
h
657.59998 426.19049 m
S
1 J
1 j
0.60000002 i
497.07495 377.67978 m
497.07495 365.77979 l
497.07495 350.08041 l
497.07495 347.319 499.31354 345.08041 502.07495 345.08041 c
524.2674 345.08041 l
526.2674 345.08041 l
S
0 i
CM
445.26743 151.91959 m
437.26743 154.91959 l
437.26743 148.91959 l
h
445.26743 151.91959 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
534.2674 345.08041 m
526.2674 342.08041 l
526.2674 348.08041 l
h
534.2674 345.08041 m
S
1 J
1 j
0.60000002 i
589.7785 426.19049 m
589.61694 278.5 l
595.11694 278.49399 595.10492 267.49399 589.60492 267.5 c
589.55841 224.97942 l
S
0 i
CM
500.54962 280.0206 m
497.55838 272.0173 l
503.55838 272.02386 l
h
500.54962 280.0206 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
589.54962 216.97942 m
586.55841 224.9827 l
592.55841 224.97614 l
h
589.54962 216.97942 m
S
1 J
1 j
0.60000002 i
208.33333 426.09891 m
275.27472 426.09891 l
275.27472 415.04532 l
275.22571 410.39941 l
S
0 i
CM
186.14134 94.600136 m
183.22589 86.568939 l
189.22556 86.632217 l
h
186.14134 94.600136 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
275.14133 402.39987 m
272.22589 410.43106 l
278.22556 410.36777 l
h
275.14133 402.39987 m
S
1 J
1 j
0.60000002 i
275.27472 426.09891 m
344.44446 426.16348 l
344.46802 410.39999 l
S
0 i
CM
255.47997 94.600006 m
252.46802 86.6045 l
258.46802 86.595528 l
h
255.47997 94.600006 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
344.47998 402.39999 m
341.46802 410.39551 l
347.46802 410.40448 l
h
344.47998 402.39999 m
S
1 J
1 j
0.60000002 i
344.44446 426.16348 m
414.14142 426.16348 l
414.08142 410.39993 l
S
0 i
CM
325.05099 94.600014 m
322.08145 86.588661 l
328.08142 86.611488 l
h
325.05099 94.600014 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
414.05099 402.39999 m
411.08145 410.41135 l
417.08142 410.38852 l
h
414.05099 402.39999 m
S
1 J
1 j
0.60000002 i
414.14142 426.16348 m
483.50168 426.16348 l
483.50098 410.39999 l
S
0 i
CM
394.50061 94.599998 m
391.50098 86.599861 l
397.50098 86.600136 l
h
394.50061 94.599998 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
483.50061 402.39999 m
480.50098 410.40015 l
486.50098 410.39987 l
h
483.50061 402.39999 m
S
1 J
1 j
0.60000002 i
238 464.28571 m
238 431.17822 l
238 428.42157 240.23109 426.185 242.98772 426.17822 c
275.27472 426.09891 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 499 295.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.9619999 1.7000198 m
(')s
/F1.1[ 13 0 0 -13 0 0]sf
1.918 7.7000198 m
($)s
1 0 0 -1 582.5 224 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.0739999 1.7000198 m
(\()s
/F1.1[ 13 0 0 -13 0 0]sf
1.03 7.7000198 m
($)s
1 0 0 -1 583 70.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.9619999 1.7000198 m
(')s
/F1.1[ 13 0 0 -13 0 0]sf
1.918 7.7000198 m
($)s
1 0 0 -1 95.5 224 cm
/F1.1[ 16 0 0 -16 0 0]sf
-11.4885 1.7000198 m
(\()s
/F1.1[ 13 0 0 -13 0 0]sf
-4.3845 7.7000198 m
($\)*)[ 5.044000 4.329000 0.000000 ] xS
1 0 0 -1 94.5 70.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-12.3765 1.7000198 m
(')s
/F1.1[ 13 0 0 -13 0 0]sf
-3.4965 7.7000198 m
($\)*)[ 5.044000 4.329000 0.000000 ] xS
1 0 0 -1 149 18.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-6.7379999 1.7000198 m
(+)s
/F1.1[ 13 0 0 -13 0 0]sf
1.694 7.7000198 m
($)s
/Cs1 SC
1 1 1 sc
CM
630 252 m
659 252 l
664.52283 252 669 247.52284 669 242 c
669 62 l
669 56.477154 664.52283 52 659 52 c
630 52 l
624.47717 52 620 56.477154 620 62 c
620 242 l
620 247.52284 624.47717 252 630 252 c
h
630 252 m
f
0.60000002 i
0.50196099 0.50196099 0.50196099 sc
1 0 0 -1 -89 497 cm
719 245 m
748 245 l
753.52283 245 758 249.47716 758 255 c
758 435 l
758 440.52286 753.52283 445 748 445 c
719 445 l
713.47717 445 709 440.52286 709 435 c
709 255 l
709 249.47716 713.47717 245 719 245 c
h
719 245 m
S
0 0 0 sc
683 273 m
699.09998 273 l
S
0 i
CM
618.09998 224 m
610.09998 227 l
610.09998 221 l
h
618.09998 224 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
707.09998 273 m
699.09998 270 l
699.09998 276 l
h
707.09998 273 m
S
1 J
1 j
0.60000002 i
684 426.19049 m
698.09998 426.19049 l
S
0 i
CM
617.09998 70.809525 m
609.09998 73.809525 l
609.09998 67.809525 l
h
617.09998 70.809525 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
706.09998 426.19049 m
698.09998 423.19049 l
698.09998 429.19049 l
h
706.09998 426.19049 m
S
1 1 1 sc
CM
19 252 m
48 252 l
53.522846 252 58 247.52284 58 242 c
58 62 l
58 56.477154 53.522846 52 48 52 c
19 52 l
13.477153 52 9 56.477154 9 62 c
9 242 l
9 247.52284 13.477153 252 19 252 c
h
19 252 m
f
1 J
1 j
0.60000002 i
0.50196099 0.50196099 0.50196099 sc
1 0 0 -1 -89 497 cm
108 245 m
137 245 l
142.52284 245 147 249.47716 147 255 c
147 435 l
147 440.52286 142.52284 445 137 445 c
108 445 l
102.47715 445 98 440.52286 98 435 c
98 255 l
98 249.47716 102.47715 245 108 245 c
h
108 245 m
S
0 0 0 sc
158.10001 273 m
147 273 l
S
0 i
CM
77.099998 224 m
69.099998 227 l
69.099998 221 l
h
77.099998 224 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
166.10001 273 m
158.10001 270 l
158.10001 276 l
h
166.10001 273 m
S
1 J
1 j
0.60000002 i
156.10001 426.09891 m
147 426.09891 l
S
0 i
CM
75.099998 70.9011 m
67.099998 73.9011 l
67.099998 67.9011 l
h
75.099998 70.9011 m
f
0 J
0 j
1 0 0 -1 -89 497 cm
164.10001 426.09891 m
156.10001 423.09891 l
156.10001 429.09891 l
h
164.10001 426.09891 m
S
1 1 1 sc
CM
0 255 m
35 255 l
35 43.888939 l
0 43.888939 l
h
0 255 m
f
637 257.55554 m
672 257.55554 l
672 46.444469 l
637 46.444469 l
h
637 257.55554 m
f
ep
end
%%Trailer
%%EOF
